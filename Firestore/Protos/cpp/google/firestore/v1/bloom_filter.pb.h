/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firestore/v1/bloom_filter.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto;
namespace google {
namespace firestore {
namespace v1 {
class BitSequence;
struct BitSequenceDefaultTypeInternal;
extern BitSequenceDefaultTypeInternal _BitSequence_default_instance_;
class BloomFilter;
struct BloomFilterDefaultTypeInternal;
extern BloomFilterDefaultTypeInternal _BloomFilter_default_instance_;
}  // namespace v1
}  // namespace firestore
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace google {
namespace firestore {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class BitSequence final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.BitSequence) */ {
 public:
  inline BitSequence() : BitSequence(nullptr) {}
  ~BitSequence() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BitSequence(::google::protobuf::internal::ConstantInitialized);

  inline BitSequence(const BitSequence& from)
      : BitSequence(nullptr, from) {}
  BitSequence(BitSequence&& from) noexcept
    : BitSequence() {
    *this = ::std::move(from);
  }

  inline BitSequence& operator=(const BitSequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline BitSequence& operator=(BitSequence&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BitSequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const BitSequence* internal_default_instance() {
    return reinterpret_cast<const BitSequence*>(
               &_BitSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BitSequence& a, BitSequence& b) {
    a.Swap(&b);
  }
  inline void Swap(BitSequence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BitSequence* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BitSequence* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BitSequence>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BitSequence& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BitSequence& from) {
    BitSequence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BitSequence* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.firestore.v1.BitSequence";
  }
  protected:
  explicit BitSequence(::google::protobuf::Arena* arena);
  BitSequence(::google::protobuf::Arena* arena, const BitSequence& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitmapFieldNumber = 1,
    kPaddingFieldNumber = 2,
  };
  // bytes bitmap = 1;
  void clear_bitmap() ;
  const std::string& bitmap() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bitmap(Arg_&& arg, Args_... args);
  std::string* mutable_bitmap();
  PROTOBUF_NODISCARD std::string* release_bitmap();
  void set_allocated_bitmap(std::string* value);

  private:
  const std::string& _internal_bitmap() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bitmap(
      const std::string& value);
  std::string* _internal_mutable_bitmap();

  public:
  // int32 padding = 2;
  void clear_padding() ;
  ::int32_t padding() const;
  void set_padding(::int32_t value);

  private:
  ::int32_t _internal_padding() const;
  void _internal_set_padding(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:google.firestore.v1.BitSequence)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr bitmap_;
    ::int32_t padding_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto;
};// -------------------------------------------------------------------

class BloomFilter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.BloomFilter) */ {
 public:
  inline BloomFilter() : BloomFilter(nullptr) {}
  ~BloomFilter() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BloomFilter(::google::protobuf::internal::ConstantInitialized);

  inline BloomFilter(const BloomFilter& from)
      : BloomFilter(nullptr, from) {}
  BloomFilter(BloomFilter&& from) noexcept
    : BloomFilter() {
    *this = ::std::move(from);
  }

  inline BloomFilter& operator=(const BloomFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline BloomFilter& operator=(BloomFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BloomFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const BloomFilter* internal_default_instance() {
    return reinterpret_cast<const BloomFilter*>(
               &_BloomFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BloomFilter& a, BloomFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(BloomFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BloomFilter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BloomFilter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BloomFilter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BloomFilter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BloomFilter& from) {
    BloomFilter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BloomFilter* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.firestore.v1.BloomFilter";
  }
  protected:
  explicit BloomFilter(::google::protobuf::Arena* arena);
  BloomFilter(::google::protobuf::Arena* arena, const BloomFilter& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitsFieldNumber = 1,
    kHashCountFieldNumber = 2,
  };
  // .google.firestore.v1.BitSequence bits = 1;
  bool has_bits() const;
  void clear_bits() ;
  const ::google::firestore::v1::BitSequence& bits() const;
  PROTOBUF_NODISCARD ::google::firestore::v1::BitSequence* release_bits();
  ::google::firestore::v1::BitSequence* mutable_bits();
  void set_allocated_bits(::google::firestore::v1::BitSequence* value);
  void unsafe_arena_set_allocated_bits(::google::firestore::v1::BitSequence* value);
  ::google::firestore::v1::BitSequence* unsafe_arena_release_bits();

  private:
  const ::google::firestore::v1::BitSequence& _internal_bits() const;
  ::google::firestore::v1::BitSequence* _internal_mutable_bits();

  public:
  // int32 hash_count = 2;
  void clear_hash_count() ;
  ::int32_t hash_count() const;
  void set_hash_count(::int32_t value);

  private:
  ::int32_t _internal_hash_count() const;
  void _internal_set_hash_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:google.firestore.v1.BloomFilter)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::firestore::v1::BitSequence* bits_;
    ::int32_t hash_count_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BitSequence

// bytes bitmap = 1;
inline void BitSequence::clear_bitmap() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bitmap_.ClearToEmpty();
}
inline const std::string& BitSequence::bitmap() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.firestore.v1.BitSequence.bitmap)
  return _internal_bitmap();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BitSequence::set_bitmap(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bitmap_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.firestore.v1.BitSequence.bitmap)
}
inline std::string* BitSequence::mutable_bitmap() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bitmap();
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.BitSequence.bitmap)
  return _s;
}
inline const std::string& BitSequence::_internal_bitmap() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bitmap_.Get();
}
inline void BitSequence::_internal_set_bitmap(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bitmap_.Set(value, GetArena());
}
inline std::string* BitSequence::_internal_mutable_bitmap() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.bitmap_.Mutable( GetArena());
}
inline std::string* BitSequence::release_bitmap() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.firestore.v1.BitSequence.bitmap)
  return _impl_.bitmap_.Release();
}
inline void BitSequence::set_allocated_bitmap(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bitmap_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bitmap_.IsDefault()) {
          _impl_.bitmap_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.BitSequence.bitmap)
}

// int32 padding = 2;
inline void BitSequence::clear_padding() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.padding_ = 0;
}
inline ::int32_t BitSequence::padding() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.BitSequence.padding)
  return _internal_padding();
}
inline void BitSequence::set_padding(::int32_t value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.BitSequence.padding)
}
inline ::int32_t BitSequence::_internal_padding() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.padding_;
}
inline void BitSequence::_internal_set_padding(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.padding_ = value;
}

// -------------------------------------------------------------------

// BloomFilter

// .google.firestore.v1.BitSequence bits = 1;
inline bool BloomFilter::has_bits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bits_ != nullptr);
  return value;
}
inline void BloomFilter::clear_bits() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.bits_ != nullptr) _impl_.bits_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::google::firestore::v1::BitSequence& BloomFilter::_internal_bits() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::firestore::v1::BitSequence* p = _impl_.bits_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::firestore::v1::BitSequence&>(::google::firestore::v1::_BitSequence_default_instance_);
}
inline const ::google::firestore::v1::BitSequence& BloomFilter::bits() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.firestore.v1.BloomFilter.bits)
  return _internal_bits();
}
inline void BloomFilter::unsafe_arena_set_allocated_bits(::google::firestore::v1::BitSequence* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bits_);
  }
  _impl_.bits_ = reinterpret_cast<::google::firestore::v1::BitSequence*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.firestore.v1.BloomFilter.bits)
}
inline ::google::firestore::v1::BitSequence* BloomFilter::release_bits() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::firestore::v1::BitSequence* released = _impl_.bits_;
  _impl_.bits_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::firestore::v1::BitSequence* BloomFilter::unsafe_arena_release_bits() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.firestore.v1.BloomFilter.bits)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::firestore::v1::BitSequence* temp = _impl_.bits_;
  _impl_.bits_ = nullptr;
  return temp;
}
inline ::google::firestore::v1::BitSequence* BloomFilter::_internal_mutable_bits() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bits_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::firestore::v1::BitSequence>(GetArena());
    _impl_.bits_ = reinterpret_cast<::google::firestore::v1::BitSequence*>(p);
  }
  return _impl_.bits_;
}
inline ::google::firestore::v1::BitSequence* BloomFilter::mutable_bits() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::firestore::v1::BitSequence* _msg = _internal_mutable_bits();
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.BloomFilter.bits)
  return _msg;
}
inline void BloomFilter::set_allocated_bits(::google::firestore::v1::BitSequence* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::firestore::v1::BitSequence*>(_impl_.bits_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::firestore::v1::BitSequence*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.bits_ = reinterpret_cast<::google::firestore::v1::BitSequence*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.BloomFilter.bits)
}

// int32 hash_count = 2;
inline void BloomFilter::clear_hash_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hash_count_ = 0;
}
inline ::int32_t BloomFilter::hash_count() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.BloomFilter.hash_count)
  return _internal_hash_count();
}
inline void BloomFilter::set_hash_count(::int32_t value) {
  _internal_set_hash_count(value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.BloomFilter.hash_count)
}
inline ::int32_t BloomFilter::_internal_hash_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hash_count_;
}
inline void BloomFilter::_internal_set_hash_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.hash_count_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace firestore
}  // namespace google


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2ffirestore_2fv1_2fbloom_5ffilter_2eproto_2epb_2eh
