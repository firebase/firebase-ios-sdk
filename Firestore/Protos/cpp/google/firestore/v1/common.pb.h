/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firestore/v1/common.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2ffirestore_2fv1_2fcommon_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_google_2ffirestore_2fv1_2fcommon_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2fcommon_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2ffirestore_2fv1_2fcommon_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto;
namespace google {
namespace firestore {
namespace v1 {
class DocumentMask;
struct DocumentMaskDefaultTypeInternal;
extern DocumentMaskDefaultTypeInternal _DocumentMask_default_instance_;
class Precondition;
struct PreconditionDefaultTypeInternal;
extern PreconditionDefaultTypeInternal _Precondition_default_instance_;
class TransactionOptions;
struct TransactionOptionsDefaultTypeInternal;
extern TransactionOptionsDefaultTypeInternal _TransactionOptions_default_instance_;
class TransactionOptions_ReadOnly;
struct TransactionOptions_ReadOnlyDefaultTypeInternal;
extern TransactionOptions_ReadOnlyDefaultTypeInternal _TransactionOptions_ReadOnly_default_instance_;
class TransactionOptions_ReadWrite;
struct TransactionOptions_ReadWriteDefaultTypeInternal;
extern TransactionOptions_ReadWriteDefaultTypeInternal _TransactionOptions_ReadWrite_default_instance_;
}  // namespace v1
}  // namespace firestore
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace google {
namespace firestore {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class TransactionOptions_ReadWrite final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.TransactionOptions.ReadWrite) */ {
 public:
  inline TransactionOptions_ReadWrite() : TransactionOptions_ReadWrite(nullptr) {}
  ~TransactionOptions_ReadWrite() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransactionOptions_ReadWrite(::google::protobuf::internal::ConstantInitialized);

  inline TransactionOptions_ReadWrite(const TransactionOptions_ReadWrite& from)
      : TransactionOptions_ReadWrite(nullptr, from) {}
  TransactionOptions_ReadWrite(TransactionOptions_ReadWrite&& from) noexcept
    : TransactionOptions_ReadWrite() {
    *this = ::std::move(from);
  }

  inline TransactionOptions_ReadWrite& operator=(const TransactionOptions_ReadWrite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOptions_ReadWrite& operator=(TransactionOptions_ReadWrite&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionOptions_ReadWrite& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionOptions_ReadWrite* internal_default_instance() {
    return reinterpret_cast<const TransactionOptions_ReadWrite*>(
               &_TransactionOptions_ReadWrite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransactionOptions_ReadWrite& a, TransactionOptions_ReadWrite& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOptions_ReadWrite* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOptions_ReadWrite* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionOptions_ReadWrite* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionOptions_ReadWrite>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransactionOptions_ReadWrite& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TransactionOptions_ReadWrite& from) {
    TransactionOptions_ReadWrite::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TransactionOptions_ReadWrite* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.firestore.v1.TransactionOptions.ReadWrite";
  }
  protected:
  explicit TransactionOptions_ReadWrite(::google::protobuf::Arena* arena);
  TransactionOptions_ReadWrite(::google::protobuf::Arena* arena, const TransactionOptions_ReadWrite& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetryTransactionFieldNumber = 1,
  };
  // bytes retry_transaction = 1;
  void clear_retry_transaction() ;
  const std::string& retry_transaction() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_retry_transaction(Arg_&& arg, Args_... args);
  std::string* mutable_retry_transaction();
  PROTOBUF_NODISCARD std::string* release_retry_transaction();
  void set_allocated_retry_transaction(std::string* value);

  private:
  const std::string& _internal_retry_transaction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_retry_transaction(
      const std::string& value);
  std::string* _internal_mutable_retry_transaction();

  public:
  // @@protoc_insertion_point(class_scope:google.firestore.v1.TransactionOptions.ReadWrite)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr retry_transaction_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fcommon_2eproto;
};// -------------------------------------------------------------------

class DocumentMask final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.DocumentMask) */ {
 public:
  inline DocumentMask() : DocumentMask(nullptr) {}
  ~DocumentMask() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DocumentMask(::google::protobuf::internal::ConstantInitialized);

  inline DocumentMask(const DocumentMask& from)
      : DocumentMask(nullptr, from) {}
  DocumentMask(DocumentMask&& from) noexcept
    : DocumentMask() {
    *this = ::std::move(from);
  }

  inline DocumentMask& operator=(const DocumentMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentMask& operator=(DocumentMask&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocumentMask& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocumentMask* internal_default_instance() {
    return reinterpret_cast<const DocumentMask*>(
               &_DocumentMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DocumentMask& a, DocumentMask& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentMask* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentMask* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DocumentMask* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DocumentMask>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DocumentMask& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DocumentMask& from) {
    DocumentMask::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DocumentMask* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.firestore.v1.DocumentMask";
  }
  protected:
  explicit DocumentMask(::google::protobuf::Arena* arena);
  DocumentMask(::google::protobuf::Arena* arena, const DocumentMask& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldPathsFieldNumber = 1,
  };
  // repeated string field_paths = 1;
  int field_paths_size() const;
  private:
  int _internal_field_paths_size() const;

  public:
  void clear_field_paths() ;
  const std::string& field_paths(int index) const;
  std::string* mutable_field_paths(int index);
  void set_field_paths(int index, const std::string& value);
  void set_field_paths(int index, std::string&& value);
  void set_field_paths(int index, const char* value);
  void set_field_paths(int index, const char* value, std::size_t size);
  void set_field_paths(int index, absl::string_view value);
  std::string* add_field_paths();
  void add_field_paths(const std::string& value);
  void add_field_paths(std::string&& value);
  void add_field_paths(const char* value);
  void add_field_paths(const char* value, std::size_t size);
  void add_field_paths(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& field_paths() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_field_paths();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_field_paths() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_field_paths();

  public:
  // @@protoc_insertion_point(class_scope:google.firestore.v1.DocumentMask)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      52, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> field_paths_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fcommon_2eproto;
};// -------------------------------------------------------------------

class TransactionOptions_ReadOnly final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.TransactionOptions.ReadOnly) */ {
 public:
  inline TransactionOptions_ReadOnly() : TransactionOptions_ReadOnly(nullptr) {}
  ~TransactionOptions_ReadOnly() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransactionOptions_ReadOnly(::google::protobuf::internal::ConstantInitialized);

  inline TransactionOptions_ReadOnly(const TransactionOptions_ReadOnly& from)
      : TransactionOptions_ReadOnly(nullptr, from) {}
  TransactionOptions_ReadOnly(TransactionOptions_ReadOnly&& from) noexcept
    : TransactionOptions_ReadOnly() {
    *this = ::std::move(from);
  }

  inline TransactionOptions_ReadOnly& operator=(const TransactionOptions_ReadOnly& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOptions_ReadOnly& operator=(TransactionOptions_ReadOnly&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionOptions_ReadOnly& default_instance() {
    return *internal_default_instance();
  }
  enum ConsistencySelectorCase {
    kReadTime = 2,
    CONSISTENCY_SELECTOR_NOT_SET = 0,
  };

  static inline const TransactionOptions_ReadOnly* internal_default_instance() {
    return reinterpret_cast<const TransactionOptions_ReadOnly*>(
               &_TransactionOptions_ReadOnly_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransactionOptions_ReadOnly& a, TransactionOptions_ReadOnly& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOptions_ReadOnly* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOptions_ReadOnly* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionOptions_ReadOnly* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionOptions_ReadOnly>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransactionOptions_ReadOnly& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TransactionOptions_ReadOnly& from) {
    TransactionOptions_ReadOnly::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TransactionOptions_ReadOnly* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.firestore.v1.TransactionOptions.ReadOnly";
  }
  protected:
  explicit TransactionOptions_ReadOnly(::google::protobuf::Arena* arena);
  TransactionOptions_ReadOnly(::google::protobuf::Arena* arena, const TransactionOptions_ReadOnly& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadTimeFieldNumber = 2,
  };
  // .google.protobuf.Timestamp read_time = 2;
  bool has_read_time() const;
  private:
  bool _internal_has_read_time() const;

  public:
  void clear_read_time() ;
  const ::google::protobuf::Timestamp& read_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_read_time();
  ::google::protobuf::Timestamp* mutable_read_time();
  void set_allocated_read_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_read_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_read_time();

  private:
  const ::google::protobuf::Timestamp& _internal_read_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_read_time();

  public:
  void clear_consistency_selector();
  ConsistencySelectorCase consistency_selector_case() const;
  // @@protoc_insertion_point(class_scope:google.firestore.v1.TransactionOptions.ReadOnly)
 private:
  class _Internal;
  void set_has_read_time();

  inline bool has_consistency_selector() const;
  inline void clear_has_consistency_selector();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union ConsistencySelectorUnion {
      constexpr ConsistencySelectorUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::Timestamp* read_time_;
    } consistency_selector_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fcommon_2eproto;
};// -------------------------------------------------------------------

class Precondition final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.Precondition) */ {
 public:
  inline Precondition() : Precondition(nullptr) {}
  ~Precondition() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Precondition(::google::protobuf::internal::ConstantInitialized);

  inline Precondition(const Precondition& from)
      : Precondition(nullptr, from) {}
  Precondition(Precondition&& from) noexcept
    : Precondition() {
    *this = ::std::move(from);
  }

  inline Precondition& operator=(const Precondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Precondition& operator=(Precondition&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Precondition& default_instance() {
    return *internal_default_instance();
  }
  enum ConditionTypeCase {
    kExists = 1,
    kUpdateTime = 2,
    CONDITION_TYPE_NOT_SET = 0,
  };

  static inline const Precondition* internal_default_instance() {
    return reinterpret_cast<const Precondition*>(
               &_Precondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Precondition& a, Precondition& b) {
    a.Swap(&b);
  }
  inline void Swap(Precondition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Precondition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Precondition* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Precondition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Precondition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Precondition& from) {
    Precondition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Precondition* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.firestore.v1.Precondition";
  }
  protected:
  explicit Precondition(::google::protobuf::Arena* arena);
  Precondition(::google::protobuf::Arena* arena, const Precondition& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExistsFieldNumber = 1,
    kUpdateTimeFieldNumber = 2,
  };
  // bool exists = 1;
  bool has_exists() const;
  void clear_exists() ;
  bool exists() const;
  void set_exists(bool value);

  private:
  bool _internal_exists() const;
  void _internal_set_exists(bool value);

  public:
  // .google.protobuf.Timestamp update_time = 2;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;

  public:
  void clear_update_time() ;
  const ::google::protobuf::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_update_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_update_time();

  private:
  const ::google::protobuf::Timestamp& _internal_update_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_update_time();

  public:
  void clear_condition_type();
  ConditionTypeCase condition_type_case() const;
  // @@protoc_insertion_point(class_scope:google.firestore.v1.Precondition)
 private:
  class _Internal;
  void set_has_exists();
  void set_has_update_time();

  inline bool has_condition_type() const;
  inline void clear_has_condition_type();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union ConditionTypeUnion {
      constexpr ConditionTypeUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      bool exists_;
      ::google::protobuf::Timestamp* update_time_;
    } condition_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fcommon_2eproto;
};// -------------------------------------------------------------------

class TransactionOptions final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.TransactionOptions) */ {
 public:
  inline TransactionOptions() : TransactionOptions(nullptr) {}
  ~TransactionOptions() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransactionOptions(::google::protobuf::internal::ConstantInitialized);

  inline TransactionOptions(const TransactionOptions& from)
      : TransactionOptions(nullptr, from) {}
  TransactionOptions(TransactionOptions&& from) noexcept
    : TransactionOptions() {
    *this = ::std::move(from);
  }

  inline TransactionOptions& operator=(const TransactionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOptions& operator=(TransactionOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransactionOptions& default_instance() {
    return *internal_default_instance();
  }
  enum ModeCase {
    kReadOnly = 2,
    kReadWrite = 3,
    MODE_NOT_SET = 0,
  };

  static inline const TransactionOptions* internal_default_instance() {
    return reinterpret_cast<const TransactionOptions*>(
               &_TransactionOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransactionOptions& a, TransactionOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransactionOptions* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransactionOptions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TransactionOptions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TransactionOptions& from) {
    TransactionOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TransactionOptions* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.firestore.v1.TransactionOptions";
  }
  protected:
  explicit TransactionOptions(::google::protobuf::Arena* arena);
  TransactionOptions(::google::protobuf::Arena* arena, const TransactionOptions& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ReadWrite = TransactionOptions_ReadWrite;
  using ReadOnly = TransactionOptions_ReadOnly;

  // accessors -------------------------------------------------------

  enum : int {
    kReadOnlyFieldNumber = 2,
    kReadWriteFieldNumber = 3,
  };
  // .google.firestore.v1.TransactionOptions.ReadOnly read_only = 2;
  bool has_read_only() const;
  private:
  bool _internal_has_read_only() const;

  public:
  void clear_read_only() ;
  const ::google::firestore::v1::TransactionOptions_ReadOnly& read_only() const;
  PROTOBUF_NODISCARD ::google::firestore::v1::TransactionOptions_ReadOnly* release_read_only();
  ::google::firestore::v1::TransactionOptions_ReadOnly* mutable_read_only();
  void set_allocated_read_only(::google::firestore::v1::TransactionOptions_ReadOnly* value);
  void unsafe_arena_set_allocated_read_only(::google::firestore::v1::TransactionOptions_ReadOnly* value);
  ::google::firestore::v1::TransactionOptions_ReadOnly* unsafe_arena_release_read_only();

  private:
  const ::google::firestore::v1::TransactionOptions_ReadOnly& _internal_read_only() const;
  ::google::firestore::v1::TransactionOptions_ReadOnly* _internal_mutable_read_only();

  public:
  // .google.firestore.v1.TransactionOptions.ReadWrite read_write = 3;
  bool has_read_write() const;
  private:
  bool _internal_has_read_write() const;

  public:
  void clear_read_write() ;
  const ::google::firestore::v1::TransactionOptions_ReadWrite& read_write() const;
  PROTOBUF_NODISCARD ::google::firestore::v1::TransactionOptions_ReadWrite* release_read_write();
  ::google::firestore::v1::TransactionOptions_ReadWrite* mutable_read_write();
  void set_allocated_read_write(::google::firestore::v1::TransactionOptions_ReadWrite* value);
  void unsafe_arena_set_allocated_read_write(::google::firestore::v1::TransactionOptions_ReadWrite* value);
  ::google::firestore::v1::TransactionOptions_ReadWrite* unsafe_arena_release_read_write();

  private:
  const ::google::firestore::v1::TransactionOptions_ReadWrite& _internal_read_write() const;
  ::google::firestore::v1::TransactionOptions_ReadWrite* _internal_mutable_read_write();

  public:
  void clear_mode();
  ModeCase mode_case() const;
  // @@protoc_insertion_point(class_scope:google.firestore.v1.TransactionOptions)
 private:
  class _Internal;
  void set_has_read_only();
  void set_has_read_write();

  inline bool has_mode() const;
  inline void clear_has_mode();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union ModeUnion {
      constexpr ModeUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::firestore::v1::TransactionOptions_ReadOnly* read_only_;
      ::google::firestore::v1::TransactionOptions_ReadWrite* read_write_;
    } mode_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fcommon_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DocumentMask

// repeated string field_paths = 1;
inline int DocumentMask::_internal_field_paths_size() const {
  return _internal_field_paths().size();
}
inline int DocumentMask::field_paths_size() const {
  return _internal_field_paths_size();
}
inline void DocumentMask::clear_field_paths() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_paths_.Clear();
}
inline std::string* DocumentMask::add_field_paths()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_field_paths()->Add();
  // @@protoc_insertion_point(field_add_mutable:google.firestore.v1.DocumentMask.field_paths)
  return _s;
}
inline const std::string& DocumentMask::field_paths(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.firestore.v1.DocumentMask.field_paths)
  return _internal_field_paths().Get(index);
}
inline std::string* DocumentMask::mutable_field_paths(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.DocumentMask.field_paths)
  return _internal_mutable_field_paths()->Mutable(index);
}
inline void DocumentMask::set_field_paths(int index, const std::string& value) {
  _internal_mutable_field_paths()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.DocumentMask.field_paths)
}
inline void DocumentMask::set_field_paths(int index, std::string&& value) {
  _internal_mutable_field_paths()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.firestore.v1.DocumentMask.field_paths)
}
inline void DocumentMask::set_field_paths(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_field_paths()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.firestore.v1.DocumentMask.field_paths)
}
inline void DocumentMask::set_field_paths(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_field_paths()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.firestore.v1.DocumentMask.field_paths)
}
inline void DocumentMask::set_field_paths(int index, absl::string_view value) {
  _internal_mutable_field_paths()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:google.firestore.v1.DocumentMask.field_paths)
}
inline void DocumentMask::add_field_paths(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_field_paths()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.firestore.v1.DocumentMask.field_paths)
}
inline void DocumentMask::add_field_paths(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_field_paths()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.firestore.v1.DocumentMask.field_paths)
}
inline void DocumentMask::add_field_paths(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_field_paths()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.firestore.v1.DocumentMask.field_paths)
}
inline void DocumentMask::add_field_paths(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_field_paths()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.firestore.v1.DocumentMask.field_paths)
}
inline void DocumentMask::add_field_paths(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_field_paths()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:google.firestore.v1.DocumentMask.field_paths)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DocumentMask::field_paths() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:google.firestore.v1.DocumentMask.field_paths)
  return _internal_field_paths();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DocumentMask::mutable_field_paths() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:google.firestore.v1.DocumentMask.field_paths)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_field_paths();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DocumentMask::_internal_field_paths() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.field_paths_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DocumentMask::_internal_mutable_field_paths() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.field_paths_;
}

// -------------------------------------------------------------------

// Precondition

// bool exists = 1;
inline bool Precondition::has_exists() const {
  return condition_type_case() == kExists;
}
inline void Precondition::set_has_exists() {
  _impl_._oneof_case_[0] = kExists;
}
inline void Precondition::clear_exists() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (condition_type_case() == kExists) {
    _impl_.condition_type_.exists_ = false;
    clear_has_condition_type();
  }
}
inline bool Precondition::exists() const {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Precondition.exists)
  return _internal_exists();
}
inline void Precondition::set_exists(bool value) {
  _internal_set_exists(value);
  // @@protoc_insertion_point(field_set:google.firestore.v1.Precondition.exists)
}
inline bool Precondition::_internal_exists() const {
  if (condition_type_case() == kExists) {
    return _impl_.condition_type_.exists_;
  }
  return false;
}
inline void Precondition::_internal_set_exists(bool value) {
  if (condition_type_case() != kExists) {
    clear_condition_type();
    set_has_exists();
  }
  _impl_.condition_type_.exists_ = value;
}

// .google.protobuf.Timestamp update_time = 2;
inline bool Precondition::has_update_time() const {
  return condition_type_case() == kUpdateTime;
}
inline bool Precondition::_internal_has_update_time() const {
  return condition_type_case() == kUpdateTime;
}
inline void Precondition::set_has_update_time() {
  _impl_._oneof_case_[0] = kUpdateTime;
}
inline ::google::protobuf::Timestamp* Precondition::release_update_time() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.Precondition.update_time)
  if (condition_type_case() == kUpdateTime) {
    clear_has_condition_type();
    auto* temp = _impl_.condition_type_.update_time_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.condition_type_.update_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Timestamp& Precondition::_internal_update_time() const {
  return condition_type_case() == kUpdateTime ? *_impl_.condition_type_.update_time_ : reinterpret_cast<::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Precondition::update_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.firestore.v1.Precondition.update_time)
  return _internal_update_time();
}
inline ::google::protobuf::Timestamp* Precondition::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.firestore.v1.Precondition.update_time)
  if (condition_type_case() == kUpdateTime) {
    clear_has_condition_type();
    auto* temp = _impl_.condition_type_.update_time_;
    _impl_.condition_type_.update_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Precondition::unsafe_arena_set_allocated_update_time(::google::protobuf::Timestamp* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_condition_type();
  if (value) {
    set_has_update_time();
    _impl_.condition_type_.update_time_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.firestore.v1.Precondition.update_time)
}
inline ::google::protobuf::Timestamp* Precondition::_internal_mutable_update_time() {
  if (condition_type_case() != kUpdateTime) {
    clear_condition_type();
    set_has_update_time();
    _impl_.condition_type_.update_time_ = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
  }
  return _impl_.condition_type_.update_time_;
}
inline ::google::protobuf::Timestamp* Precondition::mutable_update_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.Precondition.update_time)
  return _msg;
}

inline bool Precondition::has_condition_type() const {
  return condition_type_case() != CONDITION_TYPE_NOT_SET;
}
inline void Precondition::clear_has_condition_type() {
  _impl_._oneof_case_[0] = CONDITION_TYPE_NOT_SET;
}
inline Precondition::ConditionTypeCase Precondition::condition_type_case() const {
  return Precondition::ConditionTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransactionOptions_ReadWrite

// bytes retry_transaction = 1;
inline void TransactionOptions_ReadWrite::clear_retry_transaction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.retry_transaction_.ClearToEmpty();
}
inline const std::string& TransactionOptions_ReadWrite::retry_transaction() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.firestore.v1.TransactionOptions.ReadWrite.retry_transaction)
  return _internal_retry_transaction();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransactionOptions_ReadWrite::set_retry_transaction(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.retry_transaction_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.firestore.v1.TransactionOptions.ReadWrite.retry_transaction)
}
inline std::string* TransactionOptions_ReadWrite::mutable_retry_transaction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_retry_transaction();
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.TransactionOptions.ReadWrite.retry_transaction)
  return _s;
}
inline const std::string& TransactionOptions_ReadWrite::_internal_retry_transaction() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.retry_transaction_.Get();
}
inline void TransactionOptions_ReadWrite::_internal_set_retry_transaction(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.retry_transaction_.Set(value, GetArena());
}
inline std::string* TransactionOptions_ReadWrite::_internal_mutable_retry_transaction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.retry_transaction_.Mutable( GetArena());
}
inline std::string* TransactionOptions_ReadWrite::release_retry_transaction() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.firestore.v1.TransactionOptions.ReadWrite.retry_transaction)
  return _impl_.retry_transaction_.Release();
}
inline void TransactionOptions_ReadWrite::set_allocated_retry_transaction(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.retry_transaction_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.retry_transaction_.IsDefault()) {
          _impl_.retry_transaction_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.TransactionOptions.ReadWrite.retry_transaction)
}

// -------------------------------------------------------------------

// TransactionOptions_ReadOnly

// .google.protobuf.Timestamp read_time = 2;
inline bool TransactionOptions_ReadOnly::has_read_time() const {
  return consistency_selector_case() == kReadTime;
}
inline bool TransactionOptions_ReadOnly::_internal_has_read_time() const {
  return consistency_selector_case() == kReadTime;
}
inline void TransactionOptions_ReadOnly::set_has_read_time() {
  _impl_._oneof_case_[0] = kReadTime;
}
inline ::google::protobuf::Timestamp* TransactionOptions_ReadOnly::release_read_time() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.TransactionOptions.ReadOnly.read_time)
  if (consistency_selector_case() == kReadTime) {
    clear_has_consistency_selector();
    auto* temp = _impl_.consistency_selector_.read_time_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.consistency_selector_.read_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Timestamp& TransactionOptions_ReadOnly::_internal_read_time() const {
  return consistency_selector_case() == kReadTime ? *_impl_.consistency_selector_.read_time_ : reinterpret_cast<::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TransactionOptions_ReadOnly::read_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.firestore.v1.TransactionOptions.ReadOnly.read_time)
  return _internal_read_time();
}
inline ::google::protobuf::Timestamp* TransactionOptions_ReadOnly::unsafe_arena_release_read_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.firestore.v1.TransactionOptions.ReadOnly.read_time)
  if (consistency_selector_case() == kReadTime) {
    clear_has_consistency_selector();
    auto* temp = _impl_.consistency_selector_.read_time_;
    _impl_.consistency_selector_.read_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransactionOptions_ReadOnly::unsafe_arena_set_allocated_read_time(::google::protobuf::Timestamp* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_consistency_selector();
  if (value) {
    set_has_read_time();
    _impl_.consistency_selector_.read_time_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.firestore.v1.TransactionOptions.ReadOnly.read_time)
}
inline ::google::protobuf::Timestamp* TransactionOptions_ReadOnly::_internal_mutable_read_time() {
  if (consistency_selector_case() != kReadTime) {
    clear_consistency_selector();
    set_has_read_time();
    _impl_.consistency_selector_.read_time_ = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
  }
  return _impl_.consistency_selector_.read_time_;
}
inline ::google::protobuf::Timestamp* TransactionOptions_ReadOnly::mutable_read_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_read_time();
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.TransactionOptions.ReadOnly.read_time)
  return _msg;
}

inline bool TransactionOptions_ReadOnly::has_consistency_selector() const {
  return consistency_selector_case() != CONSISTENCY_SELECTOR_NOT_SET;
}
inline void TransactionOptions_ReadOnly::clear_has_consistency_selector() {
  _impl_._oneof_case_[0] = CONSISTENCY_SELECTOR_NOT_SET;
}
inline TransactionOptions_ReadOnly::ConsistencySelectorCase TransactionOptions_ReadOnly::consistency_selector_case() const {
  return TransactionOptions_ReadOnly::ConsistencySelectorCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransactionOptions

// .google.firestore.v1.TransactionOptions.ReadOnly read_only = 2;
inline bool TransactionOptions::has_read_only() const {
  return mode_case() == kReadOnly;
}
inline bool TransactionOptions::_internal_has_read_only() const {
  return mode_case() == kReadOnly;
}
inline void TransactionOptions::set_has_read_only() {
  _impl_._oneof_case_[0] = kReadOnly;
}
inline void TransactionOptions::clear_read_only() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (mode_case() == kReadOnly) {
    if (GetArena() == nullptr) {
      delete _impl_.mode_.read_only_;
    }
    clear_has_mode();
  }
}
inline ::google::firestore::v1::TransactionOptions_ReadOnly* TransactionOptions::release_read_only() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.TransactionOptions.read_only)
  if (mode_case() == kReadOnly) {
    clear_has_mode();
    auto* temp = _impl_.mode_.read_only_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.mode_.read_only_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::firestore::v1::TransactionOptions_ReadOnly& TransactionOptions::_internal_read_only() const {
  return mode_case() == kReadOnly ? *_impl_.mode_.read_only_ : reinterpret_cast<::google::firestore::v1::TransactionOptions_ReadOnly&>(::google::firestore::v1::_TransactionOptions_ReadOnly_default_instance_);
}
inline const ::google::firestore::v1::TransactionOptions_ReadOnly& TransactionOptions::read_only() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.firestore.v1.TransactionOptions.read_only)
  return _internal_read_only();
}
inline ::google::firestore::v1::TransactionOptions_ReadOnly* TransactionOptions::unsafe_arena_release_read_only() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.firestore.v1.TransactionOptions.read_only)
  if (mode_case() == kReadOnly) {
    clear_has_mode();
    auto* temp = _impl_.mode_.read_only_;
    _impl_.mode_.read_only_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransactionOptions::unsafe_arena_set_allocated_read_only(::google::firestore::v1::TransactionOptions_ReadOnly* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_mode();
  if (value) {
    set_has_read_only();
    _impl_.mode_.read_only_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.firestore.v1.TransactionOptions.read_only)
}
inline ::google::firestore::v1::TransactionOptions_ReadOnly* TransactionOptions::_internal_mutable_read_only() {
  if (mode_case() != kReadOnly) {
    clear_mode();
    set_has_read_only();
    _impl_.mode_.read_only_ = CreateMaybeMessage<::google::firestore::v1::TransactionOptions_ReadOnly>(GetArena());
  }
  return _impl_.mode_.read_only_;
}
inline ::google::firestore::v1::TransactionOptions_ReadOnly* TransactionOptions::mutable_read_only() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::firestore::v1::TransactionOptions_ReadOnly* _msg = _internal_mutable_read_only();
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.TransactionOptions.read_only)
  return _msg;
}

// .google.firestore.v1.TransactionOptions.ReadWrite read_write = 3;
inline bool TransactionOptions::has_read_write() const {
  return mode_case() == kReadWrite;
}
inline bool TransactionOptions::_internal_has_read_write() const {
  return mode_case() == kReadWrite;
}
inline void TransactionOptions::set_has_read_write() {
  _impl_._oneof_case_[0] = kReadWrite;
}
inline void TransactionOptions::clear_read_write() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (mode_case() == kReadWrite) {
    if (GetArena() == nullptr) {
      delete _impl_.mode_.read_write_;
    }
    clear_has_mode();
  }
}
inline ::google::firestore::v1::TransactionOptions_ReadWrite* TransactionOptions::release_read_write() {
  // @@protoc_insertion_point(field_release:google.firestore.v1.TransactionOptions.read_write)
  if (mode_case() == kReadWrite) {
    clear_has_mode();
    auto* temp = _impl_.mode_.read_write_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.mode_.read_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::firestore::v1::TransactionOptions_ReadWrite& TransactionOptions::_internal_read_write() const {
  return mode_case() == kReadWrite ? *_impl_.mode_.read_write_ : reinterpret_cast<::google::firestore::v1::TransactionOptions_ReadWrite&>(::google::firestore::v1::_TransactionOptions_ReadWrite_default_instance_);
}
inline const ::google::firestore::v1::TransactionOptions_ReadWrite& TransactionOptions::read_write() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.firestore.v1.TransactionOptions.read_write)
  return _internal_read_write();
}
inline ::google::firestore::v1::TransactionOptions_ReadWrite* TransactionOptions::unsafe_arena_release_read_write() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.firestore.v1.TransactionOptions.read_write)
  if (mode_case() == kReadWrite) {
    clear_has_mode();
    auto* temp = _impl_.mode_.read_write_;
    _impl_.mode_.read_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransactionOptions::unsafe_arena_set_allocated_read_write(::google::firestore::v1::TransactionOptions_ReadWrite* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_mode();
  if (value) {
    set_has_read_write();
    _impl_.mode_.read_write_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.firestore.v1.TransactionOptions.read_write)
}
inline ::google::firestore::v1::TransactionOptions_ReadWrite* TransactionOptions::_internal_mutable_read_write() {
  if (mode_case() != kReadWrite) {
    clear_mode();
    set_has_read_write();
    _impl_.mode_.read_write_ = CreateMaybeMessage<::google::firestore::v1::TransactionOptions_ReadWrite>(GetArena());
  }
  return _impl_.mode_.read_write_;
}
inline ::google::firestore::v1::TransactionOptions_ReadWrite* TransactionOptions::mutable_read_write() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::firestore::v1::TransactionOptions_ReadWrite* _msg = _internal_mutable_read_write();
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.TransactionOptions.read_write)
  return _msg;
}

inline bool TransactionOptions::has_mode() const {
  return mode_case() != MODE_NOT_SET;
}
inline void TransactionOptions::clear_has_mode() {
  _impl_._oneof_case_[0] = MODE_NOT_SET;
}
inline TransactionOptions::ModeCase TransactionOptions::mode_case() const {
  return TransactionOptions::ModeCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace firestore
}  // namespace google


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2ffirestore_2fv1_2fcommon_2eproto_2epb_2eh
