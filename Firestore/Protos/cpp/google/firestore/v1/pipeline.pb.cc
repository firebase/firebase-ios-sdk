/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firestore/v1/pipeline.proto

#include "google/firestore/v1/pipeline.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace google {
namespace firestore {
namespace v1 {
      template <typename>
PROTOBUF_CONSTEXPR StructuredPipeline_OptionsEntry_DoNotUse::StructuredPipeline_OptionsEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct StructuredPipeline_OptionsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructuredPipeline_OptionsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructuredPipeline_OptionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StructuredPipeline_OptionsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructuredPipeline_OptionsEntry_DoNotUseDefaultTypeInternal _StructuredPipeline_OptionsEntry_DoNotUse_default_instance_;

inline constexpr StructuredPipeline::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        options_{},
        pipeline_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR StructuredPipeline::StructuredPipeline(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StructuredPipelineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructuredPipelineDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructuredPipelineDefaultTypeInternal() {}
  union {
    StructuredPipeline _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructuredPipelineDefaultTypeInternal _StructuredPipeline_default_instance_;
}  // namespace v1
}  // namespace firestore
}  // namespace google
static ::_pb::Metadata file_level_metadata_google_2ffirestore_2fv1_2fpipeline_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_google_2ffirestore_2fv1_2fpipeline_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_google_2ffirestore_2fv1_2fpipeline_2eproto = nullptr;
const ::uint32_t TableStruct_google_2ffirestore_2fv1_2fpipeline_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::google::firestore::v1::StructuredPipeline_OptionsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::google::firestore::v1::StructuredPipeline_OptionsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::google::firestore::v1::StructuredPipeline_OptionsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::google::firestore::v1::StructuredPipeline_OptionsEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::google::firestore::v1::StructuredPipeline, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::google::firestore::v1::StructuredPipeline, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::google::firestore::v1::StructuredPipeline, _impl_.pipeline_),
    PROTOBUF_FIELD_OFFSET(::google::firestore::v1::StructuredPipeline, _impl_.options_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::google::firestore::v1::StructuredPipeline_OptionsEntry_DoNotUse)},
        {12, 22, -1, sizeof(::google::firestore::v1::StructuredPipeline)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::google::firestore::v1::_StructuredPipeline_OptionsEntry_DoNotUse_default_instance_._instance,
    &::google::firestore::v1::_StructuredPipeline_default_instance_._instance,
};
const char descriptor_table_protodef_google_2ffirestore_2fv1_2fpipeline_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\"google/firestore/v1/pipeline.proto\022\023go"
    "ogle.firestore.v1\032\037google/api/field_beha"
    "vior.proto\032\"google/firestore/v1/document"
    ".proto\"\342\001\n\022StructuredPipeline\0224\n\010pipelin"
    "e\030\001 \001(\0132\035.google.firestore.v1.PipelineB\003"
    "\340A\002\022J\n\007options\030\002 \003(\01324.google.firestore."
    "v1.StructuredPipeline.OptionsEntryB\003\340A\001\032"
    "J\n\014OptionsEntry\022\013\n\003key\030\001 \001(\t\022)\n\005value\030\002 "
    "\001(\0132\032.google.firestore.v1.Value:\0028\001B\305\001\n\027"
    "com.google.firestore.v1B\rPipelineProtoP\001"
    "Z;cloud.google.com/go/firestore/apiv1/fi"
    "restorepb;firestorepb\242\002\004GCFS\252\002\031Google.Cl"
    "oud.Firestore.V1\312\002\031Google\\Cloud\\Firestor"
    "e\\V1\352\002\034Google::Cloud::Firestore::V1b\006pro"
    "to3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_google_2ffirestore_2fv1_2fpipeline_2eproto_deps[2] =
    {
        &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
        &::descriptor_table_google_2ffirestore_2fv1_2fdocument_2eproto,
};
static ::absl::once_flag descriptor_table_google_2ffirestore_2fv1_2fpipeline_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2ffirestore_2fv1_2fpipeline_2eproto = {
    false,
    false,
    563,
    descriptor_table_protodef_google_2ffirestore_2fv1_2fpipeline_2eproto,
    "google/firestore/v1/pipeline.proto",
    &descriptor_table_google_2ffirestore_2fv1_2fpipeline_2eproto_once,
    descriptor_table_google_2ffirestore_2fv1_2fpipeline_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_google_2ffirestore_2fv1_2fpipeline_2eproto::offsets,
    file_level_metadata_google_2ffirestore_2fv1_2fpipeline_2eproto,
    file_level_enum_descriptors_google_2ffirestore_2fv1_2fpipeline_2eproto,
    file_level_service_descriptors_google_2ffirestore_2fv1_2fpipeline_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2ffirestore_2fv1_2fpipeline_2eproto_getter() {
  return &descriptor_table_google_2ffirestore_2fv1_2fpipeline_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2ffirestore_2fv1_2fpipeline_2eproto(&descriptor_table_google_2ffirestore_2fv1_2fpipeline_2eproto);
namespace google {
namespace firestore {
namespace v1 {
// ===================================================================

StructuredPipeline_OptionsEntry_DoNotUse::StructuredPipeline_OptionsEntry_DoNotUse() {}
StructuredPipeline_OptionsEntry_DoNotUse::StructuredPipeline_OptionsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata StructuredPipeline_OptionsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2fpipeline_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2fpipeline_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2fpipeline_2eproto[0]);
}
// ===================================================================

class StructuredPipeline::_Internal {
 public:
  using HasBits = decltype(std::declval<StructuredPipeline>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StructuredPipeline, _impl_._has_bits_);
  static const ::google::firestore::v1::Pipeline& pipeline(const StructuredPipeline* msg);
  static void set_has_pipeline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::firestore::v1::Pipeline& StructuredPipeline::_Internal::pipeline(const StructuredPipeline* msg) {
  return *msg->_impl_.pipeline_;
}
void StructuredPipeline::clear_pipeline() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.pipeline_ != nullptr) _impl_.pipeline_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void StructuredPipeline::clear_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.options_.Clear();
}
StructuredPipeline::StructuredPipeline(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.StructuredPipeline)
}
inline PROTOBUF_NDEBUG_INLINE StructuredPipeline::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        options_{visibility, arena, from.options_} {}

StructuredPipeline::StructuredPipeline(
    ::google::protobuf::Arena* arena,
    const StructuredPipeline& from)
    : ::google::protobuf::Message(arena) {
  StructuredPipeline* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pipeline_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::firestore::v1::Pipeline>(arena, *from._impl_.pipeline_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.StructuredPipeline)
}
inline PROTOBUF_NDEBUG_INLINE StructuredPipeline::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        options_{visibility, arena} {}

inline void StructuredPipeline::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.pipeline_ = {};
}
StructuredPipeline::~StructuredPipeline() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.StructuredPipeline)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StructuredPipeline::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.pipeline_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StructuredPipeline::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.StructuredPipeline)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.options_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pipeline_ != nullptr);
    _impl_.pipeline_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StructuredPipeline::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 3, 54, 2> StructuredPipeline::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StructuredPipeline, _impl_._has_bits_),
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StructuredPipeline_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.firestore.v1.Pipeline pipeline = 1 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StructuredPipeline, _impl_.pipeline_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.firestore.v1.Pipeline pipeline = 1 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(StructuredPipeline, _impl_.pipeline_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<string, .google.firestore.v1.Value> options = 2 [(.google.api.field_behavior) = OPTIONAL];
    {PROTOBUF_FIELD_OFFSET(StructuredPipeline, _impl_.options_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::firestore::v1::Pipeline>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(StructuredPipeline()._impl_.options_)>(
        1, 0, 0, 9,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::google::firestore::v1::Value>},
  }}, {{
    "\46\0\7\0\0\0\0\0"
    "google.firestore.v1.StructuredPipeline"
    "options"
  }},
};

::uint8_t* StructuredPipeline::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.StructuredPipeline)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.firestore.v1.Pipeline pipeline = 1 [(.google.api.field_behavior) = REQUIRED];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::pipeline(this),
        _Internal::pipeline(this).GetCachedSize(), target, stream);
  }

  // map<string, .google.firestore.v1.Value> options = 2 [(.google.api.field_behavior) = OPTIONAL];
  if (!_internal_options().empty()) {
    using MapType = ::google::protobuf::Map<std::string, ::google::firestore::v1::Value>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, ::google::firestore::v1::Value,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>;
    const auto& field = _internal_options();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            2, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.firestore.v1.StructuredPipeline.options");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            2, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "google.firestore.v1.StructuredPipeline.options");
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.StructuredPipeline)
  return target;
}

::size_t StructuredPipeline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.StructuredPipeline)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .google.firestore.v1.Value> options = 2 [(.google.api.field_behavior) = OPTIONAL];
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_options_size());
  for (const auto& entry : _internal_options()) {
    total_size += _pbi::MapEntryFuncs<std::string, ::google::firestore::v1::Value,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
  }
  // .google.firestore.v1.Pipeline pipeline = 1 [(.google.api.field_behavior) = REQUIRED];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.pipeline_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StructuredPipeline::_class_data_ = {
    StructuredPipeline::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StructuredPipeline::GetClassData() const {
  return &_class_data_;
}

void StructuredPipeline::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StructuredPipeline*>(&to_msg);
  auto& from = static_cast<const StructuredPipeline&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.StructuredPipeline)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.options_.MergeFrom(from._impl_.options_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pipeline()->::google::firestore::v1::Pipeline::MergeFrom(
        from._internal_pipeline());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StructuredPipeline::CopyFrom(const StructuredPipeline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.StructuredPipeline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StructuredPipeline::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StructuredPipeline::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StructuredPipeline::InternalSwap(StructuredPipeline* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.options_.InternalSwap(&other->_impl_.options_);
  swap(_impl_.pipeline_, other->_impl_.pipeline_);
}

::google::protobuf::Metadata StructuredPipeline::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2fpipeline_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2fpipeline_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2fpipeline_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace firestore
}  // namespace google
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
