/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firestore/v1/pipeline.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2ffirestore_2fv1_2fpipeline_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_google_2ffirestore_2fv1_2fpipeline_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/api/field_behavior.pb.h"
#include "google/firestore/v1/document.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fv1_2fpipeline_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2ffirestore_2fv1_2fpipeline_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_google_2ffirestore_2fv1_2fpipeline_2eproto;
namespace google {
namespace firestore {
namespace v1 {
class StructuredPipeline;
struct StructuredPipelineDefaultTypeInternal;
extern StructuredPipelineDefaultTypeInternal _StructuredPipeline_default_instance_;
class StructuredPipeline_OptionsEntry_DoNotUse;
struct StructuredPipeline_OptionsEntry_DoNotUseDefaultTypeInternal;
extern StructuredPipeline_OptionsEntry_DoNotUseDefaultTypeInternal _StructuredPipeline_OptionsEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace firestore
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace google {
namespace firestore {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class StructuredPipeline_OptionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          StructuredPipeline_OptionsEntry_DoNotUse, std::string, ::google::firestore::v1::Value,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      StructuredPipeline_OptionsEntry_DoNotUse, std::string, ::google::firestore::v1::Value,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  StructuredPipeline_OptionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StructuredPipeline_OptionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit StructuredPipeline_OptionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const StructuredPipeline_OptionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const StructuredPipeline_OptionsEntry_DoNotUse*>(
        &_StructuredPipeline_OptionsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.firestore.v1.StructuredPipeline.OptionsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fpipeline_2eproto;
};
// -------------------------------------------------------------------

class StructuredPipeline final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.v1.StructuredPipeline) */ {
 public:
  inline StructuredPipeline() : StructuredPipeline(nullptr) {}
  ~StructuredPipeline() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StructuredPipeline(::google::protobuf::internal::ConstantInitialized);

  inline StructuredPipeline(const StructuredPipeline& from)
      : StructuredPipeline(nullptr, from) {}
  StructuredPipeline(StructuredPipeline&& from) noexcept
    : StructuredPipeline() {
    *this = ::std::move(from);
  }

  inline StructuredPipeline& operator=(const StructuredPipeline& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructuredPipeline& operator=(StructuredPipeline&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StructuredPipeline& default_instance() {
    return *internal_default_instance();
  }
  static inline const StructuredPipeline* internal_default_instance() {
    return reinterpret_cast<const StructuredPipeline*>(
               &_StructuredPipeline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StructuredPipeline& a, StructuredPipeline& b) {
    a.Swap(&b);
  }
  inline void Swap(StructuredPipeline* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StructuredPipeline* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StructuredPipeline* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StructuredPipeline>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StructuredPipeline& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StructuredPipeline& from) {
    StructuredPipeline::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StructuredPipeline* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.firestore.v1.StructuredPipeline";
  }
  protected:
  explicit StructuredPipeline(::google::protobuf::Arena* arena);
  StructuredPipeline(::google::protobuf::Arena* arena, const StructuredPipeline& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 2,
    kPipelineFieldNumber = 1,
  };
  // map<string, .google.firestore.v1.Value> options = 2 [(.google.api.field_behavior) = OPTIONAL];
  int options_size() const;
  private:
  int _internal_options_size() const;

  public:
  void clear_options() ;
  const ::google::protobuf::Map<std::string, ::google::firestore::v1::Value>& options() const;
  ::google::protobuf::Map<std::string, ::google::firestore::v1::Value>* mutable_options();

  private:
  const ::google::protobuf::Map<std::string, ::google::firestore::v1::Value>& _internal_options() const;
  ::google::protobuf::Map<std::string, ::google::firestore::v1::Value>* _internal_mutable_options();

  public:
  // .google.firestore.v1.Pipeline pipeline = 1 [(.google.api.field_behavior) = REQUIRED];
  bool has_pipeline() const;
  void clear_pipeline() ;
  const ::google::firestore::v1::Pipeline& pipeline() const;
  PROTOBUF_NODISCARD ::google::firestore::v1::Pipeline* release_pipeline();
  ::google::firestore::v1::Pipeline* mutable_pipeline();
  void set_allocated_pipeline(::google::firestore::v1::Pipeline* value);
  void unsafe_arena_set_allocated_pipeline(::google::firestore::v1::Pipeline* value);
  ::google::firestore::v1::Pipeline* unsafe_arena_release_pipeline();

  private:
  const ::google::firestore::v1::Pipeline& _internal_pipeline() const;
  ::google::firestore::v1::Pipeline* _internal_mutable_pipeline();

  public:
  // @@protoc_insertion_point(class_scope:google.firestore.v1.StructuredPipeline)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 3,
      54, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<StructuredPipeline_OptionsEntry_DoNotUse, std::string, ::google::firestore::v1::Value,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        options_;
    ::google::firestore::v1::Pipeline* pipeline_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2ffirestore_2fv1_2fpipeline_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StructuredPipeline

// .google.firestore.v1.Pipeline pipeline = 1 [(.google.api.field_behavior) = REQUIRED];
inline bool StructuredPipeline::has_pipeline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pipeline_ != nullptr);
  return value;
}
inline const ::google::firestore::v1::Pipeline& StructuredPipeline::_internal_pipeline() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::firestore::v1::Pipeline* p = _impl_.pipeline_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::firestore::v1::Pipeline&>(::google::firestore::v1::_Pipeline_default_instance_);
}
inline const ::google::firestore::v1::Pipeline& StructuredPipeline::pipeline() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.firestore.v1.StructuredPipeline.pipeline)
  return _internal_pipeline();
}
inline void StructuredPipeline::unsafe_arena_set_allocated_pipeline(::google::firestore::v1::Pipeline* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pipeline_);
  }
  _impl_.pipeline_ = reinterpret_cast<::google::firestore::v1::Pipeline*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.firestore.v1.StructuredPipeline.pipeline)
}
inline ::google::firestore::v1::Pipeline* StructuredPipeline::release_pipeline() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::firestore::v1::Pipeline* released = _impl_.pipeline_;
  _impl_.pipeline_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::firestore::v1::Pipeline* StructuredPipeline::unsafe_arena_release_pipeline() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.firestore.v1.StructuredPipeline.pipeline)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::firestore::v1::Pipeline* temp = _impl_.pipeline_;
  _impl_.pipeline_ = nullptr;
  return temp;
}
inline ::google::firestore::v1::Pipeline* StructuredPipeline::_internal_mutable_pipeline() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pipeline_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::firestore::v1::Pipeline>(GetArena());
    _impl_.pipeline_ = reinterpret_cast<::google::firestore::v1::Pipeline*>(p);
  }
  return _impl_.pipeline_;
}
inline ::google::firestore::v1::Pipeline* StructuredPipeline::mutable_pipeline() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::firestore::v1::Pipeline* _msg = _internal_mutable_pipeline();
  // @@protoc_insertion_point(field_mutable:google.firestore.v1.StructuredPipeline.pipeline)
  return _msg;
}
inline void StructuredPipeline::set_allocated_pipeline(::google::firestore::v1::Pipeline* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pipeline_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pipeline_ = reinterpret_cast<::google::firestore::v1::Pipeline*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.StructuredPipeline.pipeline)
}

// map<string, .google.firestore.v1.Value> options = 2 [(.google.api.field_behavior) = OPTIONAL];
inline int StructuredPipeline::_internal_options_size() const {
  return _internal_options().size();
}
inline int StructuredPipeline::options_size() const {
  return _internal_options_size();
}
inline const ::google::protobuf::Map<std::string, ::google::firestore::v1::Value>& StructuredPipeline::_internal_options() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.options_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::google::firestore::v1::Value>& StructuredPipeline::options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:google.firestore.v1.StructuredPipeline.options)
  return _internal_options();
}
inline ::google::protobuf::Map<std::string, ::google::firestore::v1::Value>* StructuredPipeline::_internal_mutable_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.options_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::google::firestore::v1::Value>* StructuredPipeline::mutable_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:google.firestore.v1.StructuredPipeline.options)
  return _internal_mutable_options();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace firestore
}  // namespace google


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2ffirestore_2fv1_2fpipeline_2eproto_2epb_2eh
