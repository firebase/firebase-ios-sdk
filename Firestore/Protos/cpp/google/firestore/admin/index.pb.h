/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firestore/admin/index.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2ffirestore_2fadmin_2findex_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_google_2ffirestore_2fadmin_2findex_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/api/resource.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_google_2ffirestore_2fadmin_2findex_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2ffirestore_2fadmin_2findex_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_google_2ffirestore_2fadmin_2findex_2eproto;
namespace google {
namespace firestore {
namespace admin {
namespace v1 {
class Index;
struct IndexDefaultTypeInternal;
extern IndexDefaultTypeInternal _Index_default_instance_;
class Index_IndexField;
struct Index_IndexFieldDefaultTypeInternal;
extern Index_IndexFieldDefaultTypeInternal _Index_IndexField_default_instance_;
}  // namespace v1
}  // namespace admin
}  // namespace firestore
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace google {
namespace firestore {
namespace admin {
namespace v1 {
enum Index_IndexField_Order : int {
  Index_IndexField_Order_ORDER_UNSPECIFIED = 0,
  Index_IndexField_Order_ASCENDING = 1,
  Index_IndexField_Order_DESCENDING = 2,
  Index_IndexField_Order_Index_IndexField_Order_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Index_IndexField_Order_Index_IndexField_Order_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Index_IndexField_Order_IsValid(int value);
extern const uint32_t Index_IndexField_Order_internal_data_[];
constexpr Index_IndexField_Order Index_IndexField_Order_Order_MIN = static_cast<Index_IndexField_Order>(0);
constexpr Index_IndexField_Order Index_IndexField_Order_Order_MAX = static_cast<Index_IndexField_Order>(2);
constexpr int Index_IndexField_Order_Order_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Index_IndexField_Order_descriptor();
template <typename T>
const std::string& Index_IndexField_Order_Name(T value) {
  static_assert(std::is_same<T, Index_IndexField_Order>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Order_Name().");
  return Index_IndexField_Order_Name(static_cast<Index_IndexField_Order>(value));
}
template <>
inline const std::string& Index_IndexField_Order_Name(Index_IndexField_Order value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Index_IndexField_Order_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Index_IndexField_Order_Parse(absl::string_view name, Index_IndexField_Order* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Index_IndexField_Order>(
      Index_IndexField_Order_descriptor(), name, value);
}
enum Index_IndexField_ArrayConfig : int {
  Index_IndexField_ArrayConfig_ARRAY_CONFIG_UNSPECIFIED = 0,
  Index_IndexField_ArrayConfig_CONTAINS = 1,
  Index_IndexField_ArrayConfig_Index_IndexField_ArrayConfig_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Index_IndexField_ArrayConfig_Index_IndexField_ArrayConfig_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Index_IndexField_ArrayConfig_IsValid(int value);
extern const uint32_t Index_IndexField_ArrayConfig_internal_data_[];
constexpr Index_IndexField_ArrayConfig Index_IndexField_ArrayConfig_ArrayConfig_MIN = static_cast<Index_IndexField_ArrayConfig>(0);
constexpr Index_IndexField_ArrayConfig Index_IndexField_ArrayConfig_ArrayConfig_MAX = static_cast<Index_IndexField_ArrayConfig>(1);
constexpr int Index_IndexField_ArrayConfig_ArrayConfig_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
Index_IndexField_ArrayConfig_descriptor();
template <typename T>
const std::string& Index_IndexField_ArrayConfig_Name(T value) {
  static_assert(std::is_same<T, Index_IndexField_ArrayConfig>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ArrayConfig_Name().");
  return Index_IndexField_ArrayConfig_Name(static_cast<Index_IndexField_ArrayConfig>(value));
}
template <>
inline const std::string& Index_IndexField_ArrayConfig_Name(Index_IndexField_ArrayConfig value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Index_IndexField_ArrayConfig_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Index_IndexField_ArrayConfig_Parse(absl::string_view name, Index_IndexField_ArrayConfig* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Index_IndexField_ArrayConfig>(
      Index_IndexField_ArrayConfig_descriptor(), name, value);
}
enum Index_QueryScope : int {
  Index_QueryScope_QUERY_SCOPE_UNSPECIFIED = 0,
  Index_QueryScope_COLLECTION = 1,
  Index_QueryScope_COLLECTION_GROUP = 2,
  Index_QueryScope_Index_QueryScope_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Index_QueryScope_Index_QueryScope_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Index_QueryScope_IsValid(int value);
extern const uint32_t Index_QueryScope_internal_data_[];
constexpr Index_QueryScope Index_QueryScope_QueryScope_MIN = static_cast<Index_QueryScope>(0);
constexpr Index_QueryScope Index_QueryScope_QueryScope_MAX = static_cast<Index_QueryScope>(2);
constexpr int Index_QueryScope_QueryScope_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Index_QueryScope_descriptor();
template <typename T>
const std::string& Index_QueryScope_Name(T value) {
  static_assert(std::is_same<T, Index_QueryScope>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to QueryScope_Name().");
  return Index_QueryScope_Name(static_cast<Index_QueryScope>(value));
}
template <>
inline const std::string& Index_QueryScope_Name(Index_QueryScope value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Index_QueryScope_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Index_QueryScope_Parse(absl::string_view name, Index_QueryScope* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Index_QueryScope>(
      Index_QueryScope_descriptor(), name, value);
}
enum Index_State : int {
  Index_State_STATE_UNSPECIFIED = 0,
  Index_State_CREATING = 1,
  Index_State_READY = 2,
  Index_State_NEEDS_REPAIR = 3,
  Index_State_Index_State_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Index_State_Index_State_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Index_State_IsValid(int value);
extern const uint32_t Index_State_internal_data_[];
constexpr Index_State Index_State_State_MIN = static_cast<Index_State>(0);
constexpr Index_State Index_State_State_MAX = static_cast<Index_State>(3);
constexpr int Index_State_State_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
Index_State_descriptor();
template <typename T>
const std::string& Index_State_Name(T value) {
  static_assert(std::is_same<T, Index_State>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to State_Name().");
  return Index_State_Name(static_cast<Index_State>(value));
}
template <>
inline const std::string& Index_State_Name(Index_State value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Index_State_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Index_State_Parse(absl::string_view name, Index_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Index_State>(
      Index_State_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Index_IndexField final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.admin.v1.Index.IndexField) */ {
 public:
  inline Index_IndexField() : Index_IndexField(nullptr) {}
  ~Index_IndexField() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Index_IndexField(::google::protobuf::internal::ConstantInitialized);

  inline Index_IndexField(const Index_IndexField& from)
      : Index_IndexField(nullptr, from) {}
  Index_IndexField(Index_IndexField&& from) noexcept
    : Index_IndexField() {
    *this = ::std::move(from);
  }

  inline Index_IndexField& operator=(const Index_IndexField& from) {
    CopyFrom(from);
    return *this;
  }
  inline Index_IndexField& operator=(Index_IndexField&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Index_IndexField& default_instance() {
    return *internal_default_instance();
  }
  enum ValueModeCase {
    kOrder = 2,
    kArrayConfig = 3,
    VALUE_MODE_NOT_SET = 0,
  };

  static inline const Index_IndexField* internal_default_instance() {
    return reinterpret_cast<const Index_IndexField*>(
               &_Index_IndexField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Index_IndexField& a, Index_IndexField& b) {
    a.Swap(&b);
  }
  inline void Swap(Index_IndexField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Index_IndexField* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Index_IndexField* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Index_IndexField>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Index_IndexField& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Index_IndexField& from) {
    Index_IndexField::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Index_IndexField* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.firestore.admin.v1.Index.IndexField";
  }
  protected:
  explicit Index_IndexField(::google::protobuf::Arena* arena);
  Index_IndexField(::google::protobuf::Arena* arena, const Index_IndexField& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Order = Index_IndexField_Order;
  static constexpr Order ORDER_UNSPECIFIED = Index_IndexField_Order_ORDER_UNSPECIFIED;
  static constexpr Order ASCENDING = Index_IndexField_Order_ASCENDING;
  static constexpr Order DESCENDING = Index_IndexField_Order_DESCENDING;
  static inline bool Order_IsValid(int value) {
    return Index_IndexField_Order_IsValid(value);
  }
  static constexpr Order Order_MIN = Index_IndexField_Order_Order_MIN;
  static constexpr Order Order_MAX = Index_IndexField_Order_Order_MAX;
  static constexpr int Order_ARRAYSIZE = Index_IndexField_Order_Order_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Order_descriptor() {
    return Index_IndexField_Order_descriptor();
  }
  template <typename T>
  static inline const std::string& Order_Name(T value) {
    return Index_IndexField_Order_Name(value);
  }
  static inline bool Order_Parse(absl::string_view name, Order* value) {
    return Index_IndexField_Order_Parse(name, value);
  }

  using ArrayConfig = Index_IndexField_ArrayConfig;
  static constexpr ArrayConfig ARRAY_CONFIG_UNSPECIFIED = Index_IndexField_ArrayConfig_ARRAY_CONFIG_UNSPECIFIED;
  static constexpr ArrayConfig CONTAINS = Index_IndexField_ArrayConfig_CONTAINS;
  static inline bool ArrayConfig_IsValid(int value) {
    return Index_IndexField_ArrayConfig_IsValid(value);
  }
  static constexpr ArrayConfig ArrayConfig_MIN = Index_IndexField_ArrayConfig_ArrayConfig_MIN;
  static constexpr ArrayConfig ArrayConfig_MAX = Index_IndexField_ArrayConfig_ArrayConfig_MAX;
  static constexpr int ArrayConfig_ARRAYSIZE = Index_IndexField_ArrayConfig_ArrayConfig_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ArrayConfig_descriptor() {
    return Index_IndexField_ArrayConfig_descriptor();
  }
  template <typename T>
  static inline const std::string& ArrayConfig_Name(T value) {
    return Index_IndexField_ArrayConfig_Name(value);
  }
  static inline bool ArrayConfig_Parse(absl::string_view name, ArrayConfig* value) {
    return Index_IndexField_ArrayConfig_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFieldPathFieldNumber = 1,
    kOrderFieldNumber = 2,
    kArrayConfigFieldNumber = 3,
  };
  // string field_path = 1;
  void clear_field_path() ;
  const std::string& field_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_field_path(Arg_&& arg, Args_... args);
  std::string* mutable_field_path();
  PROTOBUF_NODISCARD std::string* release_field_path();
  void set_allocated_field_path(std::string* value);

  private:
  const std::string& _internal_field_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_path(
      const std::string& value);
  std::string* _internal_mutable_field_path();

  public:
  // .google.firestore.admin.v1.Index.IndexField.Order order = 2;
  bool has_order() const;
  void clear_order() ;
  ::google::firestore::admin::v1::Index_IndexField_Order order() const;
  void set_order(::google::firestore::admin::v1::Index_IndexField_Order value);

  private:
  ::google::firestore::admin::v1::Index_IndexField_Order _internal_order() const;
  void _internal_set_order(::google::firestore::admin::v1::Index_IndexField_Order value);

  public:
  // .google.firestore.admin.v1.Index.IndexField.ArrayConfig array_config = 3;
  bool has_array_config() const;
  void clear_array_config() ;
  ::google::firestore::admin::v1::Index_IndexField_ArrayConfig array_config() const;
  void set_array_config(::google::firestore::admin::v1::Index_IndexField_ArrayConfig value);

  private:
  ::google::firestore::admin::v1::Index_IndexField_ArrayConfig _internal_array_config() const;
  void _internal_set_array_config(::google::firestore::admin::v1::Index_IndexField_ArrayConfig value);

  public:
  void clear_value_mode();
  ValueModeCase value_mode_case() const;
  // @@protoc_insertion_point(class_scope:google.firestore.admin.v1.Index.IndexField)
 private:
  class _Internal;
  void set_has_order();
  void set_has_array_config();

  inline bool has_value_mode() const;
  inline void clear_has_value_mode();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 0,
      61, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr field_path_;
    union ValueModeUnion {
      constexpr ValueModeUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      int order_;
      int array_config_;
    } value_mode_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2ffirestore_2fadmin_2findex_2eproto;
};// -------------------------------------------------------------------

class Index final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.admin.v1.Index) */ {
 public:
  inline Index() : Index(nullptr) {}
  ~Index() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Index(::google::protobuf::internal::ConstantInitialized);

  inline Index(const Index& from)
      : Index(nullptr, from) {}
  Index(Index&& from) noexcept
    : Index() {
    *this = ::std::move(from);
  }

  inline Index& operator=(const Index& from) {
    CopyFrom(from);
    return *this;
  }
  inline Index& operator=(Index&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Index& default_instance() {
    return *internal_default_instance();
  }
  static inline const Index* internal_default_instance() {
    return reinterpret_cast<const Index*>(
               &_Index_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Index& a, Index& b) {
    a.Swap(&b);
  }
  inline void Swap(Index* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Index* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Index* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Index>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Index& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Index& from) {
    Index::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Index* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.firestore.admin.v1.Index";
  }
  protected:
  explicit Index(::google::protobuf::Arena* arena);
  Index(::google::protobuf::Arena* arena, const Index& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using IndexField = Index_IndexField;

  using QueryScope = Index_QueryScope;
  static constexpr QueryScope QUERY_SCOPE_UNSPECIFIED = Index_QueryScope_QUERY_SCOPE_UNSPECIFIED;
  static constexpr QueryScope COLLECTION = Index_QueryScope_COLLECTION;
  static constexpr QueryScope COLLECTION_GROUP = Index_QueryScope_COLLECTION_GROUP;
  static inline bool QueryScope_IsValid(int value) {
    return Index_QueryScope_IsValid(value);
  }
  static constexpr QueryScope QueryScope_MIN = Index_QueryScope_QueryScope_MIN;
  static constexpr QueryScope QueryScope_MAX = Index_QueryScope_QueryScope_MAX;
  static constexpr int QueryScope_ARRAYSIZE = Index_QueryScope_QueryScope_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* QueryScope_descriptor() {
    return Index_QueryScope_descriptor();
  }
  template <typename T>
  static inline const std::string& QueryScope_Name(T value) {
    return Index_QueryScope_Name(value);
  }
  static inline bool QueryScope_Parse(absl::string_view name, QueryScope* value) {
    return Index_QueryScope_Parse(name, value);
  }

  using State = Index_State;
  static constexpr State STATE_UNSPECIFIED = Index_State_STATE_UNSPECIFIED;
  static constexpr State CREATING = Index_State_CREATING;
  static constexpr State READY = Index_State_READY;
  static constexpr State NEEDS_REPAIR = Index_State_NEEDS_REPAIR;
  static inline bool State_IsValid(int value) {
    return Index_State_IsValid(value);
  }
  static constexpr State State_MIN = Index_State_State_MIN;
  static constexpr State State_MAX = Index_State_State_MAX;
  static constexpr int State_ARRAYSIZE = Index_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* State_descriptor() {
    return Index_State_descriptor();
  }
  template <typename T>
  static inline const std::string& State_Name(T value) {
    return Index_State_Name(value);
  }
  static inline bool State_Parse(absl::string_view name, State* value) {
    return Index_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 3,
    kNameFieldNumber = 1,
    kQueryScopeFieldNumber = 2,
    kStateFieldNumber = 4,
  };
  // repeated .google.firestore.admin.v1.Index.IndexField fields = 3;
  int fields_size() const;
  private:
  int _internal_fields_size() const;

  public:
  void clear_fields() ;
  ::google::firestore::admin::v1::Index_IndexField* mutable_fields(int index);
  ::google::protobuf::RepeatedPtrField< ::google::firestore::admin::v1::Index_IndexField >*
      mutable_fields();
  private:
  const ::google::protobuf::RepeatedPtrField<::google::firestore::admin::v1::Index_IndexField>& _internal_fields() const;
  ::google::protobuf::RepeatedPtrField<::google::firestore::admin::v1::Index_IndexField>* _internal_mutable_fields();
  public:
  const ::google::firestore::admin::v1::Index_IndexField& fields(int index) const;
  ::google::firestore::admin::v1::Index_IndexField* add_fields();
  const ::google::protobuf::RepeatedPtrField< ::google::firestore::admin::v1::Index_IndexField >&
      fields() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .google.firestore.admin.v1.Index.QueryScope query_scope = 2;
  void clear_query_scope() ;
  ::google::firestore::admin::v1::Index_QueryScope query_scope() const;
  void set_query_scope(::google::firestore::admin::v1::Index_QueryScope value);

  private:
  ::google::firestore::admin::v1::Index_QueryScope _internal_query_scope() const;
  void _internal_set_query_scope(::google::firestore::admin::v1::Index_QueryScope value);

  public:
  // .google.firestore.admin.v1.Index.State state = 4;
  void clear_state() ;
  ::google::firestore::admin::v1::Index_State state() const;
  void set_state(::google::firestore::admin::v1::Index_State value);

  private:
  ::google::firestore::admin::v1::Index_State _internal_state() const;
  void _internal_set_state(::google::firestore::admin::v1::Index_State value);

  public:
  // @@protoc_insertion_point(class_scope:google.firestore.admin.v1.Index)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      44, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::google::firestore::admin::v1::Index_IndexField > fields_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    int query_scope_;
    int state_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2ffirestore_2fadmin_2findex_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Index_IndexField

// string field_path = 1;
inline void Index_IndexField::clear_field_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_path_.ClearToEmpty();
}
inline const std::string& Index_IndexField::field_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1.Index.IndexField.field_path)
  return _internal_field_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Index_IndexField::set_field_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.firestore.admin.v1.Index.IndexField.field_path)
}
inline std::string* Index_IndexField::mutable_field_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_field_path();
  // @@protoc_insertion_point(field_mutable:google.firestore.admin.v1.Index.IndexField.field_path)
  return _s;
}
inline const std::string& Index_IndexField::_internal_field_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.field_path_.Get();
}
inline void Index_IndexField::_internal_set_field_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.field_path_.Set(value, GetArena());
}
inline std::string* Index_IndexField::_internal_mutable_field_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.field_path_.Mutable( GetArena());
}
inline std::string* Index_IndexField::release_field_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.firestore.admin.v1.Index.IndexField.field_path)
  return _impl_.field_path_.Release();
}
inline void Index_IndexField::set_allocated_field_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.field_path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.field_path_.IsDefault()) {
          _impl_.field_path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.firestore.admin.v1.Index.IndexField.field_path)
}

// .google.firestore.admin.v1.Index.IndexField.Order order = 2;
inline bool Index_IndexField::has_order() const {
  return value_mode_case() == kOrder;
}
inline void Index_IndexField::set_has_order() {
  _impl_._oneof_case_[0] = kOrder;
}
inline void Index_IndexField::clear_order() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_mode_case() == kOrder) {
    _impl_.value_mode_.order_ = 0;
    clear_has_value_mode();
  }
}
inline ::google::firestore::admin::v1::Index_IndexField_Order Index_IndexField::order() const {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1.Index.IndexField.order)
  return _internal_order();
}
inline void Index_IndexField::set_order(::google::firestore::admin::v1::Index_IndexField_Order value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:google.firestore.admin.v1.Index.IndexField.order)
}
inline ::google::firestore::admin::v1::Index_IndexField_Order Index_IndexField::_internal_order() const {
  if (value_mode_case() == kOrder) {
    return static_cast<::google::firestore::admin::v1::Index_IndexField_Order>(_impl_.value_mode_.order_);
  }
  return static_cast<::google::firestore::admin::v1::Index_IndexField_Order>(0);
}
inline void Index_IndexField::_internal_set_order(::google::firestore::admin::v1::Index_IndexField_Order value) {
  if (value_mode_case() != kOrder) {
    clear_value_mode();
    set_has_order();
  }
  _impl_.value_mode_.order_ = value;
}

// .google.firestore.admin.v1.Index.IndexField.ArrayConfig array_config = 3;
inline bool Index_IndexField::has_array_config() const {
  return value_mode_case() == kArrayConfig;
}
inline void Index_IndexField::set_has_array_config() {
  _impl_._oneof_case_[0] = kArrayConfig;
}
inline void Index_IndexField::clear_array_config() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value_mode_case() == kArrayConfig) {
    _impl_.value_mode_.array_config_ = 0;
    clear_has_value_mode();
  }
}
inline ::google::firestore::admin::v1::Index_IndexField_ArrayConfig Index_IndexField::array_config() const {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1.Index.IndexField.array_config)
  return _internal_array_config();
}
inline void Index_IndexField::set_array_config(::google::firestore::admin::v1::Index_IndexField_ArrayConfig value) {
  _internal_set_array_config(value);
  // @@protoc_insertion_point(field_set:google.firestore.admin.v1.Index.IndexField.array_config)
}
inline ::google::firestore::admin::v1::Index_IndexField_ArrayConfig Index_IndexField::_internal_array_config() const {
  if (value_mode_case() == kArrayConfig) {
    return static_cast<::google::firestore::admin::v1::Index_IndexField_ArrayConfig>(_impl_.value_mode_.array_config_);
  }
  return static_cast<::google::firestore::admin::v1::Index_IndexField_ArrayConfig>(0);
}
inline void Index_IndexField::_internal_set_array_config(::google::firestore::admin::v1::Index_IndexField_ArrayConfig value) {
  if (value_mode_case() != kArrayConfig) {
    clear_value_mode();
    set_has_array_config();
  }
  _impl_.value_mode_.array_config_ = value;
}

inline bool Index_IndexField::has_value_mode() const {
  return value_mode_case() != VALUE_MODE_NOT_SET;
}
inline void Index_IndexField::clear_has_value_mode() {
  _impl_._oneof_case_[0] = VALUE_MODE_NOT_SET;
}
inline Index_IndexField::ValueModeCase Index_IndexField::value_mode_case() const {
  return Index_IndexField::ValueModeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Index

// string name = 1;
inline void Index::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Index::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1.Index.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Index::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.firestore.admin.v1.Index.name)
}
inline std::string* Index::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.firestore.admin.v1.Index.name)
  return _s;
}
inline const std::string& Index::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Index::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Index::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Index::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.firestore.admin.v1.Index.name)
  return _impl_.name_.Release();
}
inline void Index::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.firestore.admin.v1.Index.name)
}

// .google.firestore.admin.v1.Index.QueryScope query_scope = 2;
inline void Index::clear_query_scope() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.query_scope_ = 0;
}
inline ::google::firestore::admin::v1::Index_QueryScope Index::query_scope() const {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1.Index.query_scope)
  return _internal_query_scope();
}
inline void Index::set_query_scope(::google::firestore::admin::v1::Index_QueryScope value) {
  _internal_set_query_scope(value);
  // @@protoc_insertion_point(field_set:google.firestore.admin.v1.Index.query_scope)
}
inline ::google::firestore::admin::v1::Index_QueryScope Index::_internal_query_scope() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::google::firestore::admin::v1::Index_QueryScope>(_impl_.query_scope_);
}
inline void Index::_internal_set_query_scope(::google::firestore::admin::v1::Index_QueryScope value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.query_scope_ = value;
}

// repeated .google.firestore.admin.v1.Index.IndexField fields = 3;
inline int Index::_internal_fields_size() const {
  return _internal_fields().size();
}
inline int Index::fields_size() const {
  return _internal_fields_size();
}
inline void Index::clear_fields() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fields_.Clear();
}
inline ::google::firestore::admin::v1::Index_IndexField* Index::mutable_fields(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:google.firestore.admin.v1.Index.fields)
  return _internal_mutable_fields()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::firestore::admin::v1::Index_IndexField>* Index::mutable_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:google.firestore.admin.v1.Index.fields)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_fields();
}
inline const ::google::firestore::admin::v1::Index_IndexField& Index::fields(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1.Index.fields)
  return _internal_fields().Get(index);
}
inline ::google::firestore::admin::v1::Index_IndexField* Index::add_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::google::firestore::admin::v1::Index_IndexField* _add = _internal_mutable_fields()->Add();
  // @@protoc_insertion_point(field_add:google.firestore.admin.v1.Index.fields)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::firestore::admin::v1::Index_IndexField>& Index::fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:google.firestore.admin.v1.Index.fields)
  return _internal_fields();
}
inline const ::google::protobuf::RepeatedPtrField<::google::firestore::admin::v1::Index_IndexField>&
Index::_internal_fields() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fields_;
}
inline ::google::protobuf::RepeatedPtrField<::google::firestore::admin::v1::Index_IndexField>*
Index::_internal_mutable_fields() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.fields_;
}

// .google.firestore.admin.v1.Index.State state = 4;
inline void Index::clear_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_ = 0;
}
inline ::google::firestore::admin::v1::Index_State Index::state() const {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1.Index.state)
  return _internal_state();
}
inline void Index::set_state(::google::firestore::admin::v1::Index_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:google.firestore.admin.v1.Index.state)
}
inline ::google::firestore::admin::v1::Index_State Index::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::google::firestore::admin::v1::Index_State>(_impl_.state_);
}
inline void Index::_internal_set_state(::google::firestore::admin::v1::Index_State value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace admin
}  // namespace firestore
}  // namespace google


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::google::firestore::admin::v1::Index_IndexField_Order> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::google::firestore::admin::v1::Index_IndexField_Order>() {
  return ::google::firestore::admin::v1::Index_IndexField_Order_descriptor();
}
template <>
struct is_proto_enum<::google::firestore::admin::v1::Index_IndexField_ArrayConfig> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::google::firestore::admin::v1::Index_IndexField_ArrayConfig>() {
  return ::google::firestore::admin::v1::Index_IndexField_ArrayConfig_descriptor();
}
template <>
struct is_proto_enum<::google::firestore::admin::v1::Index_QueryScope> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::google::firestore::admin::v1::Index_QueryScope>() {
  return ::google::firestore::admin::v1::Index_QueryScope_descriptor();
}
template <>
struct is_proto_enum<::google::firestore::admin::v1::Index_State> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::google::firestore::admin::v1::Index_State>() {
  return ::google::firestore::admin::v1::Index_State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2ffirestore_2fadmin_2findex_2eproto_2epb_2eh
