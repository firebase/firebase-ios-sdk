/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: firestore/local/mutation.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_firestore_2flocal_2fmutation_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_firestore_2flocal_2fmutation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/firestore/v1/write.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_firestore_2flocal_2fmutation_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_firestore_2flocal_2fmutation_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_firestore_2flocal_2fmutation_2eproto;
namespace firestore {
namespace client {
class MutationQueue;
struct MutationQueueDefaultTypeInternal;
extern MutationQueueDefaultTypeInternal _MutationQueue_default_instance_;
class WriteBatch;
struct WriteBatchDefaultTypeInternal;
extern WriteBatchDefaultTypeInternal _WriteBatch_default_instance_;
}  // namespace client
}  // namespace firestore
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace firestore {
namespace client {

// ===================================================================


// -------------------------------------------------------------------

class MutationQueue final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:firestore.client.MutationQueue) */ {
 public:
  inline MutationQueue() : MutationQueue(nullptr) {}
  ~MutationQueue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MutationQueue(::google::protobuf::internal::ConstantInitialized);

  inline MutationQueue(const MutationQueue& from)
      : MutationQueue(nullptr, from) {}
  MutationQueue(MutationQueue&& from) noexcept
    : MutationQueue() {
    *this = ::std::move(from);
  }

  inline MutationQueue& operator=(const MutationQueue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutationQueue& operator=(MutationQueue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MutationQueue& default_instance() {
    return *internal_default_instance();
  }
  static inline const MutationQueue* internal_default_instance() {
    return reinterpret_cast<const MutationQueue*>(
               &_MutationQueue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MutationQueue& a, MutationQueue& b) {
    a.Swap(&b);
  }
  inline void Swap(MutationQueue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutationQueue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MutationQueue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MutationQueue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MutationQueue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MutationQueue& from) {
    MutationQueue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MutationQueue* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "firestore.client.MutationQueue";
  }
  protected:
  explicit MutationQueue(::google::protobuf::Arena* arena);
  MutationQueue(::google::protobuf::Arena* arena, const MutationQueue& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastStreamTokenFieldNumber = 2,
    kLastAcknowledgedBatchIdFieldNumber = 1,
  };
  // bytes last_stream_token = 2;
  void clear_last_stream_token() ;
  const std::string& last_stream_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_stream_token(Arg_&& arg, Args_... args);
  std::string* mutable_last_stream_token();
  PROTOBUF_NODISCARD std::string* release_last_stream_token();
  void set_allocated_last_stream_token(std::string* value);

  private:
  const std::string& _internal_last_stream_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_stream_token(
      const std::string& value);
  std::string* _internal_mutable_last_stream_token();

  public:
  // int32 last_acknowledged_batch_id = 1;
  void clear_last_acknowledged_batch_id() ;
  ::int32_t last_acknowledged_batch_id() const;
  void set_last_acknowledged_batch_id(::int32_t value);

  private:
  ::int32_t _internal_last_acknowledged_batch_id() const;
  void _internal_set_last_acknowledged_batch_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:firestore.client.MutationQueue)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr last_stream_token_;
    ::int32_t last_acknowledged_batch_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_firestore_2flocal_2fmutation_2eproto;
};// -------------------------------------------------------------------

class WriteBatch final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:firestore.client.WriteBatch) */ {
 public:
  inline WriteBatch() : WriteBatch(nullptr) {}
  ~WriteBatch() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WriteBatch(::google::protobuf::internal::ConstantInitialized);

  inline WriteBatch(const WriteBatch& from)
      : WriteBatch(nullptr, from) {}
  WriteBatch(WriteBatch&& from) noexcept
    : WriteBatch() {
    *this = ::std::move(from);
  }

  inline WriteBatch& operator=(const WriteBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteBatch& operator=(WriteBatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteBatch* internal_default_instance() {
    return reinterpret_cast<const WriteBatch*>(
               &_WriteBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WriteBatch& a, WriteBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteBatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteBatch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteBatch* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteBatch>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WriteBatch& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WriteBatch& from) {
    WriteBatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WriteBatch* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "firestore.client.WriteBatch";
  }
  protected:
  explicit WriteBatch(::google::protobuf::Arena* arena);
  WriteBatch(::google::protobuf::Arena* arena, const WriteBatch& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWritesFieldNumber = 2,
    kBaseWritesFieldNumber = 4,
    kLocalWriteTimeFieldNumber = 3,
    kBatchIdFieldNumber = 1,
  };
  // repeated .google.firestore.v1.Write writes = 2;
  int writes_size() const;
  private:
  int _internal_writes_size() const;

  public:
  void clear_writes() ;
  ::google::firestore::v1::Write* mutable_writes(int index);
  ::google::protobuf::RepeatedPtrField< ::google::firestore::v1::Write >*
      mutable_writes();
  private:
  const ::google::protobuf::RepeatedPtrField<::google::firestore::v1::Write>& _internal_writes() const;
  ::google::protobuf::RepeatedPtrField<::google::firestore::v1::Write>* _internal_mutable_writes();
  public:
  const ::google::firestore::v1::Write& writes(int index) const;
  ::google::firestore::v1::Write* add_writes();
  const ::google::protobuf::RepeatedPtrField< ::google::firestore::v1::Write >&
      writes() const;
  // repeated .google.firestore.v1.Write base_writes = 4;
  int base_writes_size() const;
  private:
  int _internal_base_writes_size() const;

  public:
  void clear_base_writes() ;
  ::google::firestore::v1::Write* mutable_base_writes(int index);
  ::google::protobuf::RepeatedPtrField< ::google::firestore::v1::Write >*
      mutable_base_writes();
  private:
  const ::google::protobuf::RepeatedPtrField<::google::firestore::v1::Write>& _internal_base_writes() const;
  ::google::protobuf::RepeatedPtrField<::google::firestore::v1::Write>* _internal_mutable_base_writes();
  public:
  const ::google::firestore::v1::Write& base_writes(int index) const;
  ::google::firestore::v1::Write* add_base_writes();
  const ::google::protobuf::RepeatedPtrField< ::google::firestore::v1::Write >&
      base_writes() const;
  // .google.protobuf.Timestamp local_write_time = 3;
  bool has_local_write_time() const;
  void clear_local_write_time() ;
  const ::google::protobuf::Timestamp& local_write_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_local_write_time();
  ::google::protobuf::Timestamp* mutable_local_write_time();
  void set_allocated_local_write_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_local_write_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_local_write_time();

  private:
  const ::google::protobuf::Timestamp& _internal_local_write_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_local_write_time();

  public:
  // int32 batch_id = 1;
  void clear_batch_id() ;
  ::int32_t batch_id() const;
  void set_batch_id(::int32_t value);

  private:
  ::int32_t _internal_batch_id() const;
  void _internal_set_batch_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:firestore.client.WriteBatch)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::google::firestore::v1::Write > writes_;
    ::google::protobuf::RepeatedPtrField< ::google::firestore::v1::Write > base_writes_;
    ::google::protobuf::Timestamp* local_write_time_;
    ::int32_t batch_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_firestore_2flocal_2fmutation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MutationQueue

// int32 last_acknowledged_batch_id = 1;
inline void MutationQueue::clear_last_acknowledged_batch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_acknowledged_batch_id_ = 0;
}
inline ::int32_t MutationQueue::last_acknowledged_batch_id() const {
  // @@protoc_insertion_point(field_get:firestore.client.MutationQueue.last_acknowledged_batch_id)
  return _internal_last_acknowledged_batch_id();
}
inline void MutationQueue::set_last_acknowledged_batch_id(::int32_t value) {
  _internal_set_last_acknowledged_batch_id(value);
  // @@protoc_insertion_point(field_set:firestore.client.MutationQueue.last_acknowledged_batch_id)
}
inline ::int32_t MutationQueue::_internal_last_acknowledged_batch_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_acknowledged_batch_id_;
}
inline void MutationQueue::_internal_set_last_acknowledged_batch_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_acknowledged_batch_id_ = value;
}

// bytes last_stream_token = 2;
inline void MutationQueue::clear_last_stream_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_stream_token_.ClearToEmpty();
}
inline const std::string& MutationQueue::last_stream_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:firestore.client.MutationQueue.last_stream_token)
  return _internal_last_stream_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MutationQueue::set_last_stream_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_stream_token_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:firestore.client.MutationQueue.last_stream_token)
}
inline std::string* MutationQueue::mutable_last_stream_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_stream_token();
  // @@protoc_insertion_point(field_mutable:firestore.client.MutationQueue.last_stream_token)
  return _s;
}
inline const std::string& MutationQueue::_internal_last_stream_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_stream_token_.Get();
}
inline void MutationQueue::_internal_set_last_stream_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_stream_token_.Set(value, GetArena());
}
inline std::string* MutationQueue::_internal_mutable_last_stream_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.last_stream_token_.Mutable( GetArena());
}
inline std::string* MutationQueue::release_last_stream_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:firestore.client.MutationQueue.last_stream_token)
  return _impl_.last_stream_token_.Release();
}
inline void MutationQueue::set_allocated_last_stream_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_stream_token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_stream_token_.IsDefault()) {
          _impl_.last_stream_token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:firestore.client.MutationQueue.last_stream_token)
}

// -------------------------------------------------------------------

// WriteBatch

// int32 batch_id = 1;
inline void WriteBatch::clear_batch_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.batch_id_ = 0;
}
inline ::int32_t WriteBatch::batch_id() const {
  // @@protoc_insertion_point(field_get:firestore.client.WriteBatch.batch_id)
  return _internal_batch_id();
}
inline void WriteBatch::set_batch_id(::int32_t value) {
  _internal_set_batch_id(value);
  // @@protoc_insertion_point(field_set:firestore.client.WriteBatch.batch_id)
}
inline ::int32_t WriteBatch::_internal_batch_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.batch_id_;
}
inline void WriteBatch::_internal_set_batch_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.batch_id_ = value;
}

// repeated .google.firestore.v1.Write writes = 2;
inline int WriteBatch::_internal_writes_size() const {
  return _internal_writes().size();
}
inline int WriteBatch::writes_size() const {
  return _internal_writes_size();
}
inline ::google::firestore::v1::Write* WriteBatch::mutable_writes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:firestore.client.WriteBatch.writes)
  return _internal_mutable_writes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::firestore::v1::Write>* WriteBatch::mutable_writes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:firestore.client.WriteBatch.writes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_writes();
}
inline const ::google::firestore::v1::Write& WriteBatch::writes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:firestore.client.WriteBatch.writes)
  return _internal_writes().Get(index);
}
inline ::google::firestore::v1::Write* WriteBatch::add_writes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::google::firestore::v1::Write* _add = _internal_mutable_writes()->Add();
  // @@protoc_insertion_point(field_add:firestore.client.WriteBatch.writes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::firestore::v1::Write>& WriteBatch::writes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:firestore.client.WriteBatch.writes)
  return _internal_writes();
}
inline const ::google::protobuf::RepeatedPtrField<::google::firestore::v1::Write>&
WriteBatch::_internal_writes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.writes_;
}
inline ::google::protobuf::RepeatedPtrField<::google::firestore::v1::Write>*
WriteBatch::_internal_mutable_writes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.writes_;
}

// .google.protobuf.Timestamp local_write_time = 3;
inline bool WriteBatch::has_local_write_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.local_write_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& WriteBatch::_internal_local_write_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.local_write_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& WriteBatch::local_write_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:firestore.client.WriteBatch.local_write_time)
  return _internal_local_write_time();
}
inline void WriteBatch::unsafe_arena_set_allocated_local_write_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.local_write_time_);
  }
  _impl_.local_write_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:firestore.client.WriteBatch.local_write_time)
}
inline ::google::protobuf::Timestamp* WriteBatch::release_local_write_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.local_write_time_;
  _impl_.local_write_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* WriteBatch::unsafe_arena_release_local_write_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:firestore.client.WriteBatch.local_write_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.local_write_time_;
  _impl_.local_write_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* WriteBatch::_internal_mutable_local_write_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.local_write_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.local_write_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.local_write_time_;
}
inline ::google::protobuf::Timestamp* WriteBatch::mutable_local_write_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_local_write_time();
  // @@protoc_insertion_point(field_mutable:firestore.client.WriteBatch.local_write_time)
  return _msg;
}
inline void WriteBatch::set_allocated_local_write_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.local_write_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.local_write_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:firestore.client.WriteBatch.local_write_time)
}

// repeated .google.firestore.v1.Write base_writes = 4;
inline int WriteBatch::_internal_base_writes_size() const {
  return _internal_base_writes().size();
}
inline int WriteBatch::base_writes_size() const {
  return _internal_base_writes_size();
}
inline ::google::firestore::v1::Write* WriteBatch::mutable_base_writes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:firestore.client.WriteBatch.base_writes)
  return _internal_mutable_base_writes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::firestore::v1::Write>* WriteBatch::mutable_base_writes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:firestore.client.WriteBatch.base_writes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_base_writes();
}
inline const ::google::firestore::v1::Write& WriteBatch::base_writes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:firestore.client.WriteBatch.base_writes)
  return _internal_base_writes().Get(index);
}
inline ::google::firestore::v1::Write* WriteBatch::add_base_writes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::google::firestore::v1::Write* _add = _internal_mutable_base_writes()->Add();
  // @@protoc_insertion_point(field_add:firestore.client.WriteBatch.base_writes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::firestore::v1::Write>& WriteBatch::base_writes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:firestore.client.WriteBatch.base_writes)
  return _internal_base_writes();
}
inline const ::google::protobuf::RepeatedPtrField<::google::firestore::v1::Write>&
WriteBatch::_internal_base_writes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.base_writes_;
}
inline ::google::protobuf::RepeatedPtrField<::google::firestore::v1::Write>*
WriteBatch::_internal_mutable_base_writes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.base_writes_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace client
}  // namespace firestore


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_firestore_2flocal_2fmutation_2eproto_2epb_2eh
