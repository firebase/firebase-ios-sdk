/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: firestore/local/target.proto

#include "firestore/local/target.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace firestore {
namespace client {

inline constexpr TargetGlobal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        last_remote_snapshot_version_{nullptr},
        highest_listen_sequence_number_{::int64_t{0}},
        highest_target_id_{0},
        target_count_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TargetGlobal::TargetGlobal(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TargetGlobalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetGlobalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetGlobalDefaultTypeInternal() {}
  union {
    TargetGlobal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetGlobalDefaultTypeInternal _TargetGlobal_default_instance_;

inline constexpr Target::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        resume_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        snapshot_version_{nullptr},
        last_limbo_free_snapshot_version_{nullptr},
        last_listen_sequence_number_{::int64_t{0}},
        target_id_{0},
        target_type_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Target::Target(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetDefaultTypeInternal() {}
  union {
    Target _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetDefaultTypeInternal _Target_default_instance_;
}  // namespace client
}  // namespace firestore
static ::_pb::Metadata file_level_metadata_firestore_2flocal_2ftarget_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_firestore_2flocal_2ftarget_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_firestore_2flocal_2ftarget_2eproto = nullptr;
const ::uint32_t TableStruct_firestore_2flocal_2ftarget_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::firestore::client::Target, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::firestore::client::Target, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::firestore::client::Target, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::firestore::client::Target, _impl_.target_id_),
    PROTOBUF_FIELD_OFFSET(::firestore::client::Target, _impl_.snapshot_version_),
    PROTOBUF_FIELD_OFFSET(::firestore::client::Target, _impl_.resume_token_),
    PROTOBUF_FIELD_OFFSET(::firestore::client::Target, _impl_.last_listen_sequence_number_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::firestore::client::Target, _impl_.last_limbo_free_snapshot_version_),
    PROTOBUF_FIELD_OFFSET(::firestore::client::Target, _impl_.target_type_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::firestore::client::TargetGlobal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::firestore::client::TargetGlobal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::firestore::client::TargetGlobal, _impl_.highest_target_id_),
    PROTOBUF_FIELD_OFFSET(::firestore::client::TargetGlobal, _impl_.highest_listen_sequence_number_),
    PROTOBUF_FIELD_OFFSET(::firestore::client::TargetGlobal, _impl_.last_remote_snapshot_version_),
    PROTOBUF_FIELD_OFFSET(::firestore::client::TargetGlobal, _impl_.target_count_),
    ~0u,
    ~0u,
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 16, -1, sizeof(::firestore::client::Target)},
        {23, 35, -1, sizeof(::firestore::client::TargetGlobal)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::firestore::client::_Target_default_instance_._instance,
    &::firestore::client::_TargetGlobal_default_instance_._instance,
};
const char descriptor_table_protodef_firestore_2flocal_2ftarget_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034firestore/local/target.proto\022\020firestor"
    "e.client\032#google/firestore/v1/firestore."
    "proto\032\037google/protobuf/timestamp.proto\"\335"
    "\002\n\006Target\022\021\n\ttarget_id\030\001 \001(\005\0224\n\020snapshot"
    "_version\030\002 \001(\0132\032.google.protobuf.Timesta"
    "mp\022\024\n\014resume_token\030\003 \001(\014\022#\n\033last_listen_"
    "sequence_number\030\004 \001(\003\0228\n\005query\030\005 \001(\0132\'.g"
    "oogle.firestore.v1.Target.QueryTargetH\000\022"
    "@\n\tdocuments\030\006 \001(\0132+.google.firestore.v1"
    ".Target.DocumentsTargetH\000\022D\n last_limbo_"
    "free_snapshot_version\030\007 \001(\0132\032.google.pro"
    "tobuf.TimestampB\r\n\013target_type\"\251\001\n\014Targe"
    "tGlobal\022\031\n\021highest_target_id\030\001 \001(\005\022&\n\036hi"
    "ghest_listen_sequence_number\030\002 \001(\003\022@\n\034la"
    "st_remote_snapshot_version\030\003 \001(\0132\032.googl"
    "e.protobuf.Timestamp\022\024\n\014target_count\030\004 \001"
    "(\005B/\n#com.google.firebase.firestore.prot"
    "oP\001\242\002\005FSTPBb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_firestore_2flocal_2ftarget_2eproto_deps[2] =
    {
        &::descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_firestore_2flocal_2ftarget_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_firestore_2flocal_2ftarget_2eproto = {
    false,
    false,
    699,
    descriptor_table_protodef_firestore_2flocal_2ftarget_2eproto,
    "firestore/local/target.proto",
    &descriptor_table_firestore_2flocal_2ftarget_2eproto_once,
    descriptor_table_firestore_2flocal_2ftarget_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_firestore_2flocal_2ftarget_2eproto::offsets,
    file_level_metadata_firestore_2flocal_2ftarget_2eproto,
    file_level_enum_descriptors_firestore_2flocal_2ftarget_2eproto,
    file_level_service_descriptors_firestore_2flocal_2ftarget_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_firestore_2flocal_2ftarget_2eproto_getter() {
  return &descriptor_table_firestore_2flocal_2ftarget_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_firestore_2flocal_2ftarget_2eproto(&descriptor_table_firestore_2flocal_2ftarget_2eproto);
namespace firestore {
namespace client {
// ===================================================================

class Target::_Internal {
 public:
  using HasBits = decltype(std::declval<Target>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Target, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::firestore::client::Target, _impl_._oneof_case_);
  static const ::google::protobuf::Timestamp& snapshot_version(const Target* msg);
  static void set_has_snapshot_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::firestore::v1::Target_QueryTarget& query(const Target* msg);
  static const ::google::firestore::v1::Target_DocumentsTarget& documents(const Target* msg);
  static const ::google::protobuf::Timestamp& last_limbo_free_snapshot_version(const Target* msg);
  static void set_has_last_limbo_free_snapshot_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::google::protobuf::Timestamp& Target::_Internal::snapshot_version(const Target* msg) {
  return *msg->_impl_.snapshot_version_;
}
const ::google::firestore::v1::Target_QueryTarget& Target::_Internal::query(const Target* msg) {
  return *msg->_impl_.target_type_.query_;
}
const ::google::firestore::v1::Target_DocumentsTarget& Target::_Internal::documents(const Target* msg) {
  return *msg->_impl_.target_type_.documents_;
}
const ::google::protobuf::Timestamp& Target::_Internal::last_limbo_free_snapshot_version(const Target* msg) {
  return *msg->_impl_.last_limbo_free_snapshot_version_;
}
void Target::clear_snapshot_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.snapshot_version_ != nullptr) _impl_.snapshot_version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Target::set_allocated_query(::google::firestore::v1::Target_QueryTarget* query) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_target_type();
  if (query) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(query)->GetArena();
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(message_arena, query, submessage_arena);
    }
    set_has_query();
    _impl_.target_type_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:firestore.client.Target.query)
}
void Target::clear_query() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (target_type_case() == kQuery) {
    if (GetArena() == nullptr) {
      delete _impl_.target_type_.query_;
    }
    clear_has_target_type();
  }
}
void Target::set_allocated_documents(::google::firestore::v1::Target_DocumentsTarget* documents) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_target_type();
  if (documents) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(documents)->GetArena();
    if (message_arena != submessage_arena) {
      documents = ::google::protobuf::internal::GetOwnedMessage(message_arena, documents, submessage_arena);
    }
    set_has_documents();
    _impl_.target_type_.documents_ = documents;
  }
  // @@protoc_insertion_point(field_set_allocated:firestore.client.Target.documents)
}
void Target::clear_documents() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (target_type_case() == kDocuments) {
    if (GetArena() == nullptr) {
      delete _impl_.target_type_.documents_;
    }
    clear_has_target_type();
  }
}
void Target::clear_last_limbo_free_snapshot_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.last_limbo_free_snapshot_version_ != nullptr) _impl_.last_limbo_free_snapshot_version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Target::Target(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:firestore.client.Target)
}
inline PROTOBUF_NDEBUG_INLINE Target::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        resume_token_(arena, from.resume_token_),
        target_type_{},
        _oneof_case_{from._oneof_case_[0]} {}

Target::Target(
    ::google::protobuf::Arena* arena,
    const Target& from)
    : ::google::protobuf::Message(arena) {
  Target* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.snapshot_version_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.snapshot_version_)
                : nullptr;
  _impl_.last_limbo_free_snapshot_version_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.last_limbo_free_snapshot_version_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, last_listen_sequence_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, last_listen_sequence_number_),
           offsetof(Impl_, target_id_) -
               offsetof(Impl_, last_listen_sequence_number_) +
               sizeof(Impl_::target_id_));
  switch (target_type_case()) {
    case TARGET_TYPE_NOT_SET:
      break;
      case kQuery:
        _impl_.target_type_.query_ = CreateMaybeMessage<::google::firestore::v1::Target_QueryTarget>(arena, *from._impl_.target_type_.query_);
        break;
      case kDocuments:
        _impl_.target_type_.documents_ = CreateMaybeMessage<::google::firestore::v1::Target_DocumentsTarget>(arena, *from._impl_.target_type_.documents_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:firestore.client.Target)
}
inline PROTOBUF_NDEBUG_INLINE Target::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        resume_token_(arena),
        target_type_{},
        _oneof_case_{} {}

inline void Target::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, snapshot_version_),
           0,
           offsetof(Impl_, target_id_) -
               offsetof(Impl_, snapshot_version_) +
               sizeof(Impl_::target_id_));
}
Target::~Target() {
  // @@protoc_insertion_point(destructor:firestore.client.Target)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Target::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.resume_token_.Destroy();
  delete _impl_.snapshot_version_;
  delete _impl_.last_limbo_free_snapshot_version_;
  if (has_target_type()) {
    clear_target_type();
  }
  _impl_.~Impl_();
}

void Target::clear_target_type() {
// @@protoc_insertion_point(one_of_clear_start:firestore.client.Target)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (target_type_case()) {
    case kQuery: {
      if (GetArena() == nullptr) {
        delete _impl_.target_type_.query_;
      }
      break;
    }
    case kDocuments: {
      if (GetArena() == nullptr) {
        delete _impl_.target_type_.documents_;
      }
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TARGET_TYPE_NOT_SET;
}


PROTOBUF_NOINLINE void Target::Clear() {
// @@protoc_insertion_point(message_clear_start:firestore.client.Target)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resume_token_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.snapshot_version_ != nullptr);
      _impl_.snapshot_version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.last_limbo_free_snapshot_version_ != nullptr);
      _impl_.last_limbo_free_snapshot_version_->Clear();
    }
  }
  ::memset(&_impl_.last_listen_sequence_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.target_id_) -
      reinterpret_cast<char*>(&_impl_.last_listen_sequence_number_)) + sizeof(_impl_.target_id_));
  clear_target_type();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Target::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 4, 0, 2> Target::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Target, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Target_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 target_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Target, _impl_.target_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Target, _impl_.target_id_)}},
    // .google.protobuf.Timestamp snapshot_version = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Target, _impl_.snapshot_version_)}},
    // bytes resume_token = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Target, _impl_.resume_token_)}},
    // int64 last_listen_sequence_number = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Target, _impl_.last_listen_sequence_number_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Target, _impl_.last_listen_sequence_number_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp last_limbo_free_snapshot_version = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 3, PROTOBUF_FIELD_OFFSET(Target, _impl_.last_limbo_free_snapshot_version_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 target_id = 1;
    {PROTOBUF_FIELD_OFFSET(Target, _impl_.target_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .google.protobuf.Timestamp snapshot_version = 2;
    {PROTOBUF_FIELD_OFFSET(Target, _impl_.snapshot_version_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bytes resume_token = 3;
    {PROTOBUF_FIELD_OFFSET(Target, _impl_.resume_token_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // int64 last_listen_sequence_number = 4;
    {PROTOBUF_FIELD_OFFSET(Target, _impl_.last_listen_sequence_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .google.firestore.v1.Target.QueryTarget query = 5;
    {PROTOBUF_FIELD_OFFSET(Target, _impl_.target_type_.query_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.firestore.v1.Target.DocumentsTarget documents = 6;
    {PROTOBUF_FIELD_OFFSET(Target, _impl_.target_type_.documents_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp last_limbo_free_snapshot_version = 7;
    {PROTOBUF_FIELD_OFFSET(Target, _impl_.last_limbo_free_snapshot_version_), _Internal::kHasBitsOffset + 1, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::firestore::v1::Target_QueryTarget>()},
    {::_pbi::TcParser::GetTable<::google::firestore::v1::Target_DocumentsTarget>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

::uint8_t* Target::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firestore.client.Target)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 target_id = 1;
  if (this->_internal_target_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_target_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp snapshot_version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::snapshot_version(this),
        _Internal::snapshot_version(this).GetCachedSize(), target, stream);
  }

  // bytes resume_token = 3;
  if (!this->_internal_resume_token().empty()) {
    const std::string& _s = this->_internal_resume_token();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // int64 last_listen_sequence_number = 4;
  if (this->_internal_last_listen_sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<4>(
            stream, this->_internal_last_listen_sequence_number(), target);
  }

  switch (target_type_case()) {
    case kQuery: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::query(this),
          _Internal::query(this).GetCachedSize(), target, stream);
      break;
    }
    case kDocuments: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, _Internal::documents(this),
          _Internal::documents(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  // .google.protobuf.Timestamp last_limbo_free_snapshot_version = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::last_limbo_free_snapshot_version(this),
        _Internal::last_limbo_free_snapshot_version(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firestore.client.Target)
  return target;
}

::size_t Target::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firestore.client.Target)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes resume_token = 3;
  if (!this->_internal_resume_token().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_resume_token());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp snapshot_version = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.snapshot_version_);
    }

    // .google.protobuf.Timestamp last_limbo_free_snapshot_version = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.last_limbo_free_snapshot_version_);
    }

  }
  // int64 last_listen_sequence_number = 4;
  if (this->_internal_last_listen_sequence_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_last_listen_sequence_number());
  }

  // int32 target_id = 1;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_target_id());
  }

  switch (target_type_case()) {
    // .google.firestore.v1.Target.QueryTarget query = 5;
    case kQuery: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.target_type_.query_);
      break;
    }
    // .google.firestore.v1.Target.DocumentsTarget documents = 6;
    case kDocuments: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.target_type_.documents_);
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Target::_class_data_ = {
    Target::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Target::GetClassData() const {
  return &_class_data_;
}

void Target::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Target*>(&to_msg);
  auto& from = static_cast<const Target&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:firestore.client.Target)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_resume_token().empty()) {
    _this->_internal_set_resume_token(from._internal_resume_token());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_snapshot_version()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_snapshot_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_last_limbo_free_snapshot_version()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_last_limbo_free_snapshot_version());
    }
  }
  if (from._internal_last_listen_sequence_number() != 0) {
    _this->_internal_set_last_listen_sequence_number(from._internal_last_listen_sequence_number());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  switch (from.target_type_case()) {
    case kQuery: {
      _this->_internal_mutable_query()->::google::firestore::v1::Target_QueryTarget::MergeFrom(
          from._internal_query());
      break;
    }
    case kDocuments: {
      _this->_internal_mutable_documents()->::google::firestore::v1::Target_DocumentsTarget::MergeFrom(
          from._internal_documents());
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Target::CopyFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firestore.client.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Target::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Target::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Target::InternalSwap(Target* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.resume_token_, &other->_impl_.resume_token_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Target, _impl_.target_id_)
      + sizeof(Target::_impl_.target_id_)
      - PROTOBUF_FIELD_OFFSET(Target, _impl_.snapshot_version_)>(
          reinterpret_cast<char*>(&_impl_.snapshot_version_),
          reinterpret_cast<char*>(&other->_impl_.snapshot_version_));
  swap(_impl_.target_type_, other->_impl_.target_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Target::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_firestore_2flocal_2ftarget_2eproto_getter, &descriptor_table_firestore_2flocal_2ftarget_2eproto_once,
      file_level_metadata_firestore_2flocal_2ftarget_2eproto[0]);
}
// ===================================================================

class TargetGlobal::_Internal {
 public:
  using HasBits = decltype(std::declval<TargetGlobal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TargetGlobal, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& last_remote_snapshot_version(const TargetGlobal* msg);
  static void set_has_last_remote_snapshot_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Timestamp& TargetGlobal::_Internal::last_remote_snapshot_version(const TargetGlobal* msg) {
  return *msg->_impl_.last_remote_snapshot_version_;
}
void TargetGlobal::clear_last_remote_snapshot_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.last_remote_snapshot_version_ != nullptr) _impl_.last_remote_snapshot_version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TargetGlobal::TargetGlobal(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:firestore.client.TargetGlobal)
}
inline PROTOBUF_NDEBUG_INLINE TargetGlobal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TargetGlobal::TargetGlobal(
    ::google::protobuf::Arena* arena,
    const TargetGlobal& from)
    : ::google::protobuf::Message(arena) {
  TargetGlobal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.last_remote_snapshot_version_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.last_remote_snapshot_version_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, highest_listen_sequence_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, highest_listen_sequence_number_),
           offsetof(Impl_, target_count_) -
               offsetof(Impl_, highest_listen_sequence_number_) +
               sizeof(Impl_::target_count_));

  // @@protoc_insertion_point(copy_constructor:firestore.client.TargetGlobal)
}
inline PROTOBUF_NDEBUG_INLINE TargetGlobal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TargetGlobal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, last_remote_snapshot_version_),
           0,
           offsetof(Impl_, target_count_) -
               offsetof(Impl_, last_remote_snapshot_version_) +
               sizeof(Impl_::target_count_));
}
TargetGlobal::~TargetGlobal() {
  // @@protoc_insertion_point(destructor:firestore.client.TargetGlobal)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void TargetGlobal::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.last_remote_snapshot_version_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TargetGlobal::Clear() {
// @@protoc_insertion_point(message_clear_start:firestore.client.TargetGlobal)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.last_remote_snapshot_version_ != nullptr);
    _impl_.last_remote_snapshot_version_->Clear();
  }
  ::memset(&_impl_.highest_listen_sequence_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.target_count_) -
      reinterpret_cast<char*>(&_impl_.highest_listen_sequence_number_)) + sizeof(_impl_.target_count_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* TargetGlobal::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 0, 2> TargetGlobal::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TargetGlobal, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TargetGlobal_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 target_count = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TargetGlobal, _impl_.target_count_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TargetGlobal, _impl_.target_count_)}},
    // int32 highest_target_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TargetGlobal, _impl_.highest_target_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TargetGlobal, _impl_.highest_target_id_)}},
    // int64 highest_listen_sequence_number = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(TargetGlobal, _impl_.highest_listen_sequence_number_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TargetGlobal, _impl_.highest_listen_sequence_number_)}},
    // .google.protobuf.Timestamp last_remote_snapshot_version = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(TargetGlobal, _impl_.last_remote_snapshot_version_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 highest_target_id = 1;
    {PROTOBUF_FIELD_OFFSET(TargetGlobal, _impl_.highest_target_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 highest_listen_sequence_number = 2;
    {PROTOBUF_FIELD_OFFSET(TargetGlobal, _impl_.highest_listen_sequence_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .google.protobuf.Timestamp last_remote_snapshot_version = 3;
    {PROTOBUF_FIELD_OFFSET(TargetGlobal, _impl_.last_remote_snapshot_version_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 target_count = 4;
    {PROTOBUF_FIELD_OFFSET(TargetGlobal, _impl_.target_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

::uint8_t* TargetGlobal::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firestore.client.TargetGlobal)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 highest_target_id = 1;
  if (this->_internal_highest_target_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_highest_target_id(), target);
  }

  // int64 highest_listen_sequence_number = 2;
  if (this->_internal_highest_listen_sequence_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_highest_listen_sequence_number(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp last_remote_snapshot_version = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::last_remote_snapshot_version(this),
        _Internal::last_remote_snapshot_version(this).GetCachedSize(), target, stream);
  }

  // int32 target_count = 4;
  if (this->_internal_target_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_target_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firestore.client.TargetGlobal)
  return target;
}

::size_t TargetGlobal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firestore.client.TargetGlobal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp last_remote_snapshot_version = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.last_remote_snapshot_version_);
  }

  // int64 highest_listen_sequence_number = 2;
  if (this->_internal_highest_listen_sequence_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_highest_listen_sequence_number());
  }

  // int32 highest_target_id = 1;
  if (this->_internal_highest_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_highest_target_id());
  }

  // int32 target_count = 4;
  if (this->_internal_target_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_target_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData TargetGlobal::_class_data_ = {
    TargetGlobal::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* TargetGlobal::GetClassData() const {
  return &_class_data_;
}

void TargetGlobal::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<TargetGlobal*>(&to_msg);
  auto& from = static_cast<const TargetGlobal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:firestore.client.TargetGlobal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_last_remote_snapshot_version()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_last_remote_snapshot_version());
  }
  if (from._internal_highest_listen_sequence_number() != 0) {
    _this->_internal_set_highest_listen_sequence_number(from._internal_highest_listen_sequence_number());
  }
  if (from._internal_highest_target_id() != 0) {
    _this->_internal_set_highest_target_id(from._internal_highest_target_id());
  }
  if (from._internal_target_count() != 0) {
    _this->_internal_set_target_count(from._internal_target_count());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TargetGlobal::CopyFrom(const TargetGlobal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firestore.client.TargetGlobal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TargetGlobal::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TargetGlobal::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TargetGlobal::InternalSwap(TargetGlobal* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetGlobal, _impl_.target_count_)
      + sizeof(TargetGlobal::_impl_.target_count_)
      - PROTOBUF_FIELD_OFFSET(TargetGlobal, _impl_.last_remote_snapshot_version_)>(
          reinterpret_cast<char*>(&_impl_.last_remote_snapshot_version_),
          reinterpret_cast<char*>(&other->_impl_.last_remote_snapshot_version_));
}

::google::protobuf::Metadata TargetGlobal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_firestore_2flocal_2ftarget_2eproto_getter, &descriptor_table_firestore_2flocal_2ftarget_2eproto_once,
      file_level_metadata_firestore_2flocal_2ftarget_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace client
}  // namespace firestore
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
