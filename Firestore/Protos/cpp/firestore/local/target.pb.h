/*
 * Copyright 2025 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: firestore/local/target.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_firestore_2flocal_2ftarget_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_firestore_2flocal_2ftarget_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/firestore/v1/firestore.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_firestore_2flocal_2ftarget_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_firestore_2flocal_2ftarget_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_firestore_2flocal_2ftarget_2eproto;
namespace firestore {
namespace client {
class Target;
struct TargetDefaultTypeInternal;
extern TargetDefaultTypeInternal _Target_default_instance_;
class TargetGlobal;
struct TargetGlobalDefaultTypeInternal;
extern TargetGlobalDefaultTypeInternal _TargetGlobal_default_instance_;
}  // namespace client
}  // namespace firestore
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace firestore {
namespace client {

// ===================================================================


// -------------------------------------------------------------------

class TargetGlobal final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:firestore.client.TargetGlobal) */ {
 public:
  inline TargetGlobal() : TargetGlobal(nullptr) {}
  ~TargetGlobal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TargetGlobal(::google::protobuf::internal::ConstantInitialized);

  inline TargetGlobal(const TargetGlobal& from)
      : TargetGlobal(nullptr, from) {}
  TargetGlobal(TargetGlobal&& from) noexcept
    : TargetGlobal() {
    *this = ::std::move(from);
  }

  inline TargetGlobal& operator=(const TargetGlobal& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetGlobal& operator=(TargetGlobal&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TargetGlobal& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetGlobal* internal_default_instance() {
    return reinterpret_cast<const TargetGlobal*>(
               &_TargetGlobal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TargetGlobal& a, TargetGlobal& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetGlobal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetGlobal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TargetGlobal* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TargetGlobal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TargetGlobal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TargetGlobal& from) {
    TargetGlobal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TargetGlobal* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "firestore.client.TargetGlobal";
  }
  protected:
  explicit TargetGlobal(::google::protobuf::Arena* arena);
  TargetGlobal(::google::protobuf::Arena* arena, const TargetGlobal& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastRemoteSnapshotVersionFieldNumber = 3,
    kHighestListenSequenceNumberFieldNumber = 2,
    kHighestTargetIdFieldNumber = 1,
    kTargetCountFieldNumber = 4,
  };
  // .google.protobuf.Timestamp last_remote_snapshot_version = 3;
  bool has_last_remote_snapshot_version() const;
  void clear_last_remote_snapshot_version() ;
  const ::google::protobuf::Timestamp& last_remote_snapshot_version() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_last_remote_snapshot_version();
  ::google::protobuf::Timestamp* mutable_last_remote_snapshot_version();
  void set_allocated_last_remote_snapshot_version(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_last_remote_snapshot_version(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_remote_snapshot_version();

  private:
  const ::google::protobuf::Timestamp& _internal_last_remote_snapshot_version() const;
  ::google::protobuf::Timestamp* _internal_mutable_last_remote_snapshot_version();

  public:
  // int64 highest_listen_sequence_number = 2;
  void clear_highest_listen_sequence_number() ;
  ::int64_t highest_listen_sequence_number() const;
  void set_highest_listen_sequence_number(::int64_t value);

  private:
  ::int64_t _internal_highest_listen_sequence_number() const;
  void _internal_set_highest_listen_sequence_number(::int64_t value);

  public:
  // int32 highest_target_id = 1;
  void clear_highest_target_id() ;
  ::int32_t highest_target_id() const;
  void set_highest_target_id(::int32_t value);

  private:
  ::int32_t _internal_highest_target_id() const;
  void _internal_set_highest_target_id(::int32_t value);

  public:
  // int32 target_count = 4;
  void clear_target_count() ;
  ::int32_t target_count() const;
  void set_target_count(::int32_t value);

  private:
  ::int32_t _internal_target_count() const;
  void _internal_set_target_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:firestore.client.TargetGlobal)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Timestamp* last_remote_snapshot_version_;
    ::int64_t highest_listen_sequence_number_;
    ::int32_t highest_target_id_;
    ::int32_t target_count_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_firestore_2flocal_2ftarget_2eproto;
};// -------------------------------------------------------------------

class Target final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:firestore.client.Target) */ {
 public:
  inline Target() : Target(nullptr) {}
  ~Target() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Target(::google::protobuf::internal::ConstantInitialized);

  inline Target(const Target& from)
      : Target(nullptr, from) {}
  Target(Target&& from) noexcept
    : Target() {
    *this = ::std::move(from);
  }

  inline Target& operator=(const Target& from) {
    CopyFrom(from);
    return *this;
  }
  inline Target& operator=(Target&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Target& default_instance() {
    return *internal_default_instance();
  }
  enum TargetTypeCase {
    kQuery = 5,
    kDocuments = 6,
    TARGET_TYPE_NOT_SET = 0,
  };

  static inline const Target* internal_default_instance() {
    return reinterpret_cast<const Target*>(
               &_Target_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Target& a, Target& b) {
    a.Swap(&b);
  }
  inline void Swap(Target* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Target* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Target* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Target>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Target& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Target& from) {
    Target::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Target* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "firestore.client.Target";
  }
  protected:
  explicit Target(::google::protobuf::Arena* arena);
  Target(::google::protobuf::Arena* arena, const Target& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResumeTokenFieldNumber = 3,
    kSnapshotVersionFieldNumber = 2,
    kLastLimboFreeSnapshotVersionFieldNumber = 7,
    kLastListenSequenceNumberFieldNumber = 4,
    kTargetIdFieldNumber = 1,
    kQueryFieldNumber = 5,
    kDocumentsFieldNumber = 6,
  };
  // bytes resume_token = 3;
  void clear_resume_token() ;
  const std::string& resume_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_resume_token(Arg_&& arg, Args_... args);
  std::string* mutable_resume_token();
  PROTOBUF_NODISCARD std::string* release_resume_token();
  void set_allocated_resume_token(std::string* value);

  private:
  const std::string& _internal_resume_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resume_token(
      const std::string& value);
  std::string* _internal_mutable_resume_token();

  public:
  // .google.protobuf.Timestamp snapshot_version = 2;
  bool has_snapshot_version() const;
  void clear_snapshot_version() ;
  const ::google::protobuf::Timestamp& snapshot_version() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_snapshot_version();
  ::google::protobuf::Timestamp* mutable_snapshot_version();
  void set_allocated_snapshot_version(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_snapshot_version(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_snapshot_version();

  private:
  const ::google::protobuf::Timestamp& _internal_snapshot_version() const;
  ::google::protobuf::Timestamp* _internal_mutable_snapshot_version();

  public:
  // .google.protobuf.Timestamp last_limbo_free_snapshot_version = 7;
  bool has_last_limbo_free_snapshot_version() const;
  void clear_last_limbo_free_snapshot_version() ;
  const ::google::protobuf::Timestamp& last_limbo_free_snapshot_version() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_last_limbo_free_snapshot_version();
  ::google::protobuf::Timestamp* mutable_last_limbo_free_snapshot_version();
  void set_allocated_last_limbo_free_snapshot_version(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_last_limbo_free_snapshot_version(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_limbo_free_snapshot_version();

  private:
  const ::google::protobuf::Timestamp& _internal_last_limbo_free_snapshot_version() const;
  ::google::protobuf::Timestamp* _internal_mutable_last_limbo_free_snapshot_version();

  public:
  // int64 last_listen_sequence_number = 4;
  void clear_last_listen_sequence_number() ;
  ::int64_t last_listen_sequence_number() const;
  void set_last_listen_sequence_number(::int64_t value);

  private:
  ::int64_t _internal_last_listen_sequence_number() const;
  void _internal_set_last_listen_sequence_number(::int64_t value);

  public:
  // int32 target_id = 1;
  void clear_target_id() ;
  ::int32_t target_id() const;
  void set_target_id(::int32_t value);

  private:
  ::int32_t _internal_target_id() const;
  void _internal_set_target_id(::int32_t value);

  public:
  // .google.firestore.v1.Target.QueryTarget query = 5;
  bool has_query() const;
  private:
  bool _internal_has_query() const;

  public:
  void clear_query() ;
  const ::google::firestore::v1::Target_QueryTarget& query() const;
  PROTOBUF_NODISCARD ::google::firestore::v1::Target_QueryTarget* release_query();
  ::google::firestore::v1::Target_QueryTarget* mutable_query();
  void set_allocated_query(::google::firestore::v1::Target_QueryTarget* value);
  void unsafe_arena_set_allocated_query(::google::firestore::v1::Target_QueryTarget* value);
  ::google::firestore::v1::Target_QueryTarget* unsafe_arena_release_query();

  private:
  const ::google::firestore::v1::Target_QueryTarget& _internal_query() const;
  ::google::firestore::v1::Target_QueryTarget* _internal_mutable_query();

  public:
  // .google.firestore.v1.Target.DocumentsTarget documents = 6;
  bool has_documents() const;
  private:
  bool _internal_has_documents() const;

  public:
  void clear_documents() ;
  const ::google::firestore::v1::Target_DocumentsTarget& documents() const;
  PROTOBUF_NODISCARD ::google::firestore::v1::Target_DocumentsTarget* release_documents();
  ::google::firestore::v1::Target_DocumentsTarget* mutable_documents();
  void set_allocated_documents(::google::firestore::v1::Target_DocumentsTarget* value);
  void unsafe_arena_set_allocated_documents(::google::firestore::v1::Target_DocumentsTarget* value);
  ::google::firestore::v1::Target_DocumentsTarget* unsafe_arena_release_documents();

  private:
  const ::google::firestore::v1::Target_DocumentsTarget& _internal_documents() const;
  ::google::firestore::v1::Target_DocumentsTarget* _internal_mutable_documents();

  public:
  void clear_target_type();
  TargetTypeCase target_type_case() const;
  // @@protoc_insertion_point(class_scope:firestore.client.Target)
 private:
  class _Internal;
  void set_has_query();
  void set_has_documents();

  inline bool has_target_type() const;
  inline void clear_has_target_type();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr resume_token_;
    ::google::protobuf::Timestamp* snapshot_version_;
    ::google::protobuf::Timestamp* last_limbo_free_snapshot_version_;
    ::int64_t last_listen_sequence_number_;
    ::int32_t target_id_;
    union TargetTypeUnion {
      constexpr TargetTypeUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::firestore::v1::Target_QueryTarget* query_;
      ::google::firestore::v1::Target_DocumentsTarget* documents_;
    } target_type_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_firestore_2flocal_2ftarget_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Target

// int32 target_id = 1;
inline void Target::clear_target_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.target_id_ = 0;
}
inline ::int32_t Target::target_id() const {
  // @@protoc_insertion_point(field_get:firestore.client.Target.target_id)
  return _internal_target_id();
}
inline void Target::set_target_id(::int32_t value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:firestore.client.Target.target_id)
}
inline ::int32_t Target::_internal_target_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.target_id_;
}
inline void Target::_internal_set_target_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.target_id_ = value;
}

// .google.protobuf.Timestamp snapshot_version = 2;
inline bool Target::has_snapshot_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.snapshot_version_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Target::_internal_snapshot_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.snapshot_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Target::snapshot_version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:firestore.client.Target.snapshot_version)
  return _internal_snapshot_version();
}
inline void Target::unsafe_arena_set_allocated_snapshot_version(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.snapshot_version_);
  }
  _impl_.snapshot_version_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:firestore.client.Target.snapshot_version)
}
inline ::google::protobuf::Timestamp* Target::release_snapshot_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.snapshot_version_;
  _impl_.snapshot_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Target::unsafe_arena_release_snapshot_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:firestore.client.Target.snapshot_version)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.snapshot_version_;
  _impl_.snapshot_version_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Target::_internal_mutable_snapshot_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.snapshot_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.snapshot_version_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.snapshot_version_;
}
inline ::google::protobuf::Timestamp* Target::mutable_snapshot_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_snapshot_version();
  // @@protoc_insertion_point(field_mutable:firestore.client.Target.snapshot_version)
  return _msg;
}
inline void Target::set_allocated_snapshot_version(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.snapshot_version_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.snapshot_version_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:firestore.client.Target.snapshot_version)
}

// bytes resume_token = 3;
inline void Target::clear_resume_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.resume_token_.ClearToEmpty();
}
inline const std::string& Target::resume_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:firestore.client.Target.resume_token)
  return _internal_resume_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Target::set_resume_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.resume_token_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:firestore.client.Target.resume_token)
}
inline std::string* Target::mutable_resume_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_resume_token();
  // @@protoc_insertion_point(field_mutable:firestore.client.Target.resume_token)
  return _s;
}
inline const std::string& Target::_internal_resume_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.resume_token_.Get();
}
inline void Target::_internal_set_resume_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.resume_token_.Set(value, GetArena());
}
inline std::string* Target::_internal_mutable_resume_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.resume_token_.Mutable( GetArena());
}
inline std::string* Target::release_resume_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:firestore.client.Target.resume_token)
  return _impl_.resume_token_.Release();
}
inline void Target::set_allocated_resume_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.resume_token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.resume_token_.IsDefault()) {
          _impl_.resume_token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:firestore.client.Target.resume_token)
}

// int64 last_listen_sequence_number = 4;
inline void Target::clear_last_listen_sequence_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_listen_sequence_number_ = ::int64_t{0};
}
inline ::int64_t Target::last_listen_sequence_number() const {
  // @@protoc_insertion_point(field_get:firestore.client.Target.last_listen_sequence_number)
  return _internal_last_listen_sequence_number();
}
inline void Target::set_last_listen_sequence_number(::int64_t value) {
  _internal_set_last_listen_sequence_number(value);
  // @@protoc_insertion_point(field_set:firestore.client.Target.last_listen_sequence_number)
}
inline ::int64_t Target::_internal_last_listen_sequence_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_listen_sequence_number_;
}
inline void Target::_internal_set_last_listen_sequence_number(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_listen_sequence_number_ = value;
}

// .google.firestore.v1.Target.QueryTarget query = 5;
inline bool Target::has_query() const {
  return target_type_case() == kQuery;
}
inline bool Target::_internal_has_query() const {
  return target_type_case() == kQuery;
}
inline void Target::set_has_query() {
  _impl_._oneof_case_[0] = kQuery;
}
inline ::google::firestore::v1::Target_QueryTarget* Target::release_query() {
  // @@protoc_insertion_point(field_release:firestore.client.Target.query)
  if (target_type_case() == kQuery) {
    clear_has_target_type();
    auto* temp = _impl_.target_type_.query_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.target_type_.query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::firestore::v1::Target_QueryTarget& Target::_internal_query() const {
  return target_type_case() == kQuery ? *_impl_.target_type_.query_ : reinterpret_cast<::google::firestore::v1::Target_QueryTarget&>(::google::firestore::v1::_Target_QueryTarget_default_instance_);
}
inline const ::google::firestore::v1::Target_QueryTarget& Target::query() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:firestore.client.Target.query)
  return _internal_query();
}
inline ::google::firestore::v1::Target_QueryTarget* Target::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_unsafe_arena_release:firestore.client.Target.query)
  if (target_type_case() == kQuery) {
    clear_has_target_type();
    auto* temp = _impl_.target_type_.query_;
    _impl_.target_type_.query_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Target::unsafe_arena_set_allocated_query(::google::firestore::v1::Target_QueryTarget* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_target_type();
  if (value) {
    set_has_query();
    _impl_.target_type_.query_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:firestore.client.Target.query)
}
inline ::google::firestore::v1::Target_QueryTarget* Target::_internal_mutable_query() {
  if (target_type_case() != kQuery) {
    clear_target_type();
    set_has_query();
    _impl_.target_type_.query_ = CreateMaybeMessage<::google::firestore::v1::Target_QueryTarget>(GetArena());
  }
  return _impl_.target_type_.query_;
}
inline ::google::firestore::v1::Target_QueryTarget* Target::mutable_query() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::firestore::v1::Target_QueryTarget* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:firestore.client.Target.query)
  return _msg;
}

// .google.firestore.v1.Target.DocumentsTarget documents = 6;
inline bool Target::has_documents() const {
  return target_type_case() == kDocuments;
}
inline bool Target::_internal_has_documents() const {
  return target_type_case() == kDocuments;
}
inline void Target::set_has_documents() {
  _impl_._oneof_case_[0] = kDocuments;
}
inline ::google::firestore::v1::Target_DocumentsTarget* Target::release_documents() {
  // @@protoc_insertion_point(field_release:firestore.client.Target.documents)
  if (target_type_case() == kDocuments) {
    clear_has_target_type();
    auto* temp = _impl_.target_type_.documents_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.target_type_.documents_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::firestore::v1::Target_DocumentsTarget& Target::_internal_documents() const {
  return target_type_case() == kDocuments ? *_impl_.target_type_.documents_ : reinterpret_cast<::google::firestore::v1::Target_DocumentsTarget&>(::google::firestore::v1::_Target_DocumentsTarget_default_instance_);
}
inline const ::google::firestore::v1::Target_DocumentsTarget& Target::documents() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:firestore.client.Target.documents)
  return _internal_documents();
}
inline ::google::firestore::v1::Target_DocumentsTarget* Target::unsafe_arena_release_documents() {
  // @@protoc_insertion_point(field_unsafe_arena_release:firestore.client.Target.documents)
  if (target_type_case() == kDocuments) {
    clear_has_target_type();
    auto* temp = _impl_.target_type_.documents_;
    _impl_.target_type_.documents_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Target::unsafe_arena_set_allocated_documents(::google::firestore::v1::Target_DocumentsTarget* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_target_type();
  if (value) {
    set_has_documents();
    _impl_.target_type_.documents_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:firestore.client.Target.documents)
}
inline ::google::firestore::v1::Target_DocumentsTarget* Target::_internal_mutable_documents() {
  if (target_type_case() != kDocuments) {
    clear_target_type();
    set_has_documents();
    _impl_.target_type_.documents_ = CreateMaybeMessage<::google::firestore::v1::Target_DocumentsTarget>(GetArena());
  }
  return _impl_.target_type_.documents_;
}
inline ::google::firestore::v1::Target_DocumentsTarget* Target::mutable_documents() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::firestore::v1::Target_DocumentsTarget* _msg = _internal_mutable_documents();
  // @@protoc_insertion_point(field_mutable:firestore.client.Target.documents)
  return _msg;
}

// .google.protobuf.Timestamp last_limbo_free_snapshot_version = 7;
inline bool Target::has_last_limbo_free_snapshot_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_limbo_free_snapshot_version_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Target::_internal_last_limbo_free_snapshot_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.last_limbo_free_snapshot_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Target::last_limbo_free_snapshot_version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:firestore.client.Target.last_limbo_free_snapshot_version)
  return _internal_last_limbo_free_snapshot_version();
}
inline void Target::unsafe_arena_set_allocated_last_limbo_free_snapshot_version(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_limbo_free_snapshot_version_);
  }
  _impl_.last_limbo_free_snapshot_version_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:firestore.client.Target.last_limbo_free_snapshot_version)
}
inline ::google::protobuf::Timestamp* Target::release_last_limbo_free_snapshot_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.last_limbo_free_snapshot_version_;
  _impl_.last_limbo_free_snapshot_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Target::unsafe_arena_release_last_limbo_free_snapshot_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:firestore.client.Target.last_limbo_free_snapshot_version)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.last_limbo_free_snapshot_version_;
  _impl_.last_limbo_free_snapshot_version_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Target::_internal_mutable_last_limbo_free_snapshot_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.last_limbo_free_snapshot_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.last_limbo_free_snapshot_version_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.last_limbo_free_snapshot_version_;
}
inline ::google::protobuf::Timestamp* Target::mutable_last_limbo_free_snapshot_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_last_limbo_free_snapshot_version();
  // @@protoc_insertion_point(field_mutable:firestore.client.Target.last_limbo_free_snapshot_version)
  return _msg;
}
inline void Target::set_allocated_last_limbo_free_snapshot_version(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_limbo_free_snapshot_version_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.last_limbo_free_snapshot_version_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:firestore.client.Target.last_limbo_free_snapshot_version)
}

inline bool Target::has_target_type() const {
  return target_type_case() != TARGET_TYPE_NOT_SET;
}
inline void Target::clear_has_target_type() {
  _impl_._oneof_case_[0] = TARGET_TYPE_NOT_SET;
}
inline Target::TargetTypeCase Target::target_type_case() const {
  return Target::TargetTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TargetGlobal

// int32 highest_target_id = 1;
inline void TargetGlobal::clear_highest_target_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.highest_target_id_ = 0;
}
inline ::int32_t TargetGlobal::highest_target_id() const {
  // @@protoc_insertion_point(field_get:firestore.client.TargetGlobal.highest_target_id)
  return _internal_highest_target_id();
}
inline void TargetGlobal::set_highest_target_id(::int32_t value) {
  _internal_set_highest_target_id(value);
  // @@protoc_insertion_point(field_set:firestore.client.TargetGlobal.highest_target_id)
}
inline ::int32_t TargetGlobal::_internal_highest_target_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.highest_target_id_;
}
inline void TargetGlobal::_internal_set_highest_target_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.highest_target_id_ = value;
}

// int64 highest_listen_sequence_number = 2;
inline void TargetGlobal::clear_highest_listen_sequence_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.highest_listen_sequence_number_ = ::int64_t{0};
}
inline ::int64_t TargetGlobal::highest_listen_sequence_number() const {
  // @@protoc_insertion_point(field_get:firestore.client.TargetGlobal.highest_listen_sequence_number)
  return _internal_highest_listen_sequence_number();
}
inline void TargetGlobal::set_highest_listen_sequence_number(::int64_t value) {
  _internal_set_highest_listen_sequence_number(value);
  // @@protoc_insertion_point(field_set:firestore.client.TargetGlobal.highest_listen_sequence_number)
}
inline ::int64_t TargetGlobal::_internal_highest_listen_sequence_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.highest_listen_sequence_number_;
}
inline void TargetGlobal::_internal_set_highest_listen_sequence_number(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.highest_listen_sequence_number_ = value;
}

// .google.protobuf.Timestamp last_remote_snapshot_version = 3;
inline bool TargetGlobal::has_last_remote_snapshot_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_remote_snapshot_version_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TargetGlobal::_internal_last_remote_snapshot_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.last_remote_snapshot_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TargetGlobal::last_remote_snapshot_version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:firestore.client.TargetGlobal.last_remote_snapshot_version)
  return _internal_last_remote_snapshot_version();
}
inline void TargetGlobal::unsafe_arena_set_allocated_last_remote_snapshot_version(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_remote_snapshot_version_);
  }
  _impl_.last_remote_snapshot_version_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:firestore.client.TargetGlobal.last_remote_snapshot_version)
}
inline ::google::protobuf::Timestamp* TargetGlobal::release_last_remote_snapshot_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.last_remote_snapshot_version_;
  _impl_.last_remote_snapshot_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* TargetGlobal::unsafe_arena_release_last_remote_snapshot_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:firestore.client.TargetGlobal.last_remote_snapshot_version)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.last_remote_snapshot_version_;
  _impl_.last_remote_snapshot_version_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TargetGlobal::_internal_mutable_last_remote_snapshot_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.last_remote_snapshot_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.last_remote_snapshot_version_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.last_remote_snapshot_version_;
}
inline ::google::protobuf::Timestamp* TargetGlobal::mutable_last_remote_snapshot_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_last_remote_snapshot_version();
  // @@protoc_insertion_point(field_mutable:firestore.client.TargetGlobal.last_remote_snapshot_version)
  return _msg;
}
inline void TargetGlobal::set_allocated_last_remote_snapshot_version(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_remote_snapshot_version_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.last_remote_snapshot_version_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:firestore.client.TargetGlobal.last_remote_snapshot_version)
}

// int32 target_count = 4;
inline void TargetGlobal::clear_target_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.target_count_ = 0;
}
inline ::int32_t TargetGlobal::target_count() const {
  // @@protoc_insertion_point(field_get:firestore.client.TargetGlobal.target_count)
  return _internal_target_count();
}
inline void TargetGlobal::set_target_count(::int32_t value) {
  _internal_set_target_count(value);
  // @@protoc_insertion_point(field_set:firestore.client.TargetGlobal.target_count)
}
inline ::int32_t TargetGlobal::_internal_target_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.target_count_;
}
inline void TargetGlobal::_internal_set_target_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.target_count_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace client
}  // namespace firestore


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_firestore_2flocal_2ftarget_2eproto_2epb_2eh
