
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation

/// A type that represents a remote multimodal model (like Gemini), with the ability to generate
/// content based on various input types.
@available(iOS 15.0, macOS 12.0, macCatalyst 15.0, tvOS 15.0, watchOS 8.0, *)
public final class TemplateGenerativeModel: BaseTemplateAPIClientModel {
  /// Generates content from a prompt template and variables.
  ///
  /// - Parameters:
  ///   - template: The prompt template to use.
  ///   - variables: A dictionary of variables to substitute into the template.
  /// - Returns: The content generated by the model.
  /// - Throws: A ``GenerateContentError`` if the request failed.
  public func templateGenerateContent(template: String,
                                      variables: [String: Any]) async throws
    -> GenerateContentResponse {
    return try await templateGenerateContentWithHistory(
      history: [],
      template: template,
      variables: variables
    )
  }

  /// Generates content from a prompt template, variables, and history.
  ///
  /// - Parameters:
  ///   - history: The conversation history to use.
  ///   - template: The prompt template to use.
  ///   - variables: A dictionary of variables to substitute into the template.
  /// - Returns: The content generated by the model.
  /// - Throws: A ``GenerateContentError`` if the request failed.
  func templateGenerateContentWithHistory(history: [ModelContent], template: String,
                                          variables: [String: Any]) async throws
    -> GenerateContentResponse {
    let candidate = Candidate(
      content: ModelContent(role: "model", parts: ["response"]),
      safetyRatings: [],
      finishReason: .stop,
      citationMetadata: nil
    )
    return GenerateContentResponse(candidates: [candidate], promptFeedback: nil)
  }

  /// Creates a new chat conversation using this model with the provided history and template.
  ///
  /// - Parameters:
  ///   - template: The prompt template to use.
  ///   - history: The conversation history to use.
  /// - Returns: A new ``TemplateChatSession`` instance.
  public func startTemplateChat(template: String,
                                history: [ModelContent] = []) -> TemplateChatSession {
    return TemplateChatSession(
      templateGenerateContent: templateGenerateContentWithHistory,
      template: template,
      history: history
    )
  }
}
