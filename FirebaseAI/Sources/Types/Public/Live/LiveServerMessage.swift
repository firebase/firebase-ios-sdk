// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// Update from the  server, generated from the model in response to client messages.
@available(iOS 15.0, macOS 12.0, macCatalyst 15.0, tvOS 15.0, watchOS 8.0, *)
public struct LiveServerMessage: Sendable {
  let serverMessage: BidiGenerateContentServerMessage

  /// The type of message sent from the server.
  public enum MessageType: Sendable {
    /// Content generated by the model in response to client messages.
    case content(LiveServerContent)

    /// Request for the client to execute the provided functions.
    case toolCall(LiveServerToolCall)

    /// Notification for the client that a previously issued ``LiveServerToolCall`` should be
    /// cancelled.
    case toolCallCancellation(LiveServerToolCallCancellation)

    /// Server will disconnect soon.
    case goAway(LiveServerGoAway)
  }

  /// The actual message sent from the server.
  public var messageType: MessageType

  /// Metadata on the usage of the cached content.
  public var usageMetadata: GenerateContentResponse.UsageMetadata? { serverMessage.usageMetadata }
}

// MARK: - Internal parsing

@available(iOS 15.0, macOS 12.0, macCatalyst 15.0, tvOS 15.0, watchOS 8.0, *)
extension LiveServerMessage {
  static func tryFrom(_ serverMessage: BidiGenerateContentServerMessage) -> Self? {
    guard let messageType = LiveServerMessage.MessageType.tryFrom(serverMessage.messageType) else {
      return nil
    }

    return LiveServerMessage(serverMessage: serverMessage, messageType: messageType)
  }
}

@available(iOS 15.0, macOS 12.0, macCatalyst 15.0, tvOS 15.0, watchOS 8.0, *)
extension LiveServerMessage.MessageType {
  static func tryFrom(_ serverMessage: BidiGenerateContentServerMessage.MessageType) -> Self? {
    return switch serverMessage {
    case .setupComplete:
      // this is handled internally, and should not be surfaced to users
      nil
    case let .serverContent(msg):
      .content(LiveServerContent(msg))
    case let .toolCall(msg):
      .toolCall(LiveServerToolCall(msg))
    case let .toolCallCancellation(msg):
      .toolCallCancellation(LiveServerToolCallCancellation(msg))
    case let .goAway(msg):
      .goAway(LiveServerGoAway(msg))
    }
  }
}
