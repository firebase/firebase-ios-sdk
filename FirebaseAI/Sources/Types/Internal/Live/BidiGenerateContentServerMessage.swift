// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation

/// Response message for BidiGenerateContent RPC call.
@available(iOS 15.0, macOS 12.0, macCatalyst 15.0, tvOS 15.0, watchOS 8.0, *)
public struct BidiGenerateContentServerMessage: Sendable {
  // TODO: Make this type `internal`

  /// The type of the message.
  enum MessageType {
    /// Sent in response to a `BidiGenerateContentSetup` message from the client.
    case setupComplete(BidiGenerateContentSetupComplete)

    /// Content generated by the model in response to client messages.
    case serverContent(BidiGenerateContentServerContent)

    /// Request for the client to execute the `function_calls` and return the
    /// responses with the matching `id`s.
    case toolCall(BidiGenerateContentToolCall)

    /// Notification for the client that a previously issued
    /// `ToolCallMessage` with the specified `id`s should have been not executed
    /// and should be cancelled.
    case toolCallCancellation(BidiGenerateContentToolCallCancellation)

    /// Server will disconnect soon.
    case goAway(GoAway)
  }

  /// The message type.
  let messageType: MessageType

  /// Usage metadata about the response(s).
  let usageMetadata: GenerateContentResponse.UsageMetadata?
}

// MARK: - Decodable

extension BidiGenerateContentServerMessage: Decodable {
  enum CodingKeys: String, CodingKey {
    case setupComplete
    case serverContent
    case toolCall
    case toolCallCancellation
    case goAway
    case usageMetadata
  }

  public init(from decoder: any Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)

    if let setupComplete = try container.decodeIfPresent(
      BidiGenerateContentSetupComplete.self,
      forKey: .setupComplete
    ) {
      messageType = .setupComplete(setupComplete)
    } else if let serverContent = try container.decodeIfPresent(
      BidiGenerateContentServerContent.self,
      forKey: .serverContent
    ) {
      messageType = .serverContent(serverContent)
    } else if let toolCall = try container.decodeIfPresent(
      BidiGenerateContentToolCall.self,
      forKey: .toolCall
    ) {
      messageType = .toolCall(toolCall)
    } else if let toolCallCancellation = try container.decodeIfPresent(
      BidiGenerateContentToolCallCancellation.self,
      forKey: .toolCallCancellation
    ) {
      messageType = .toolCallCancellation(toolCallCancellation)
    } else if let goAway = try container.decodeIfPresent(GoAway.self, forKey: .goAway) {
      messageType = .goAway(goAway)
    } else {
      let context = DecodingError.Context(
        codingPath: decoder.codingPath,
        debugDescription: "Could not decode server message."
      )
      throw DecodingError.dataCorrupted(context)
    }

    usageMetadata = try container.decodeIfPresent(
      GenerateContentResponse.UsageMetadata.self,
      forKey: .usageMetadata
    )
  }
}
